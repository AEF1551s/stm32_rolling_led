
rolling_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001b7c  08001b7c  00011b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c1c  08001c1c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001c1c  08001c1c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c1c  08001c1c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000064  08001c88  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001c88  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001675  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000559  00000000  00000000  00021709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00021c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  00021df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed0a  00000000  00000000  00021f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000178f  00000000  00000000  00030c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004801a  00000000  00000000  000323d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007a3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d78  00000000  00000000  0007a444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b64 	.word	0x08001b64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001b64 	.word	0x08001b64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <_Z8delay_msi>:

#include <stm32f410rx.h>
#include <stm32f4xx.h>

void delay_ms(int delay)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    // TODO: Use timers.

    volatile int i; // try to stop optimisation removing loops
    for (; delay > 0; delay--)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	dd13      	ble.n	80002e6 <_Z8delay_msi+0x36>
    {
        for (i = 0; i < 3195; i++)
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f640 427a 	movw	r2, #3194	; 0xc7a
 80002c8:	4293      	cmp	r3, r2
 80002ca:	bfd4      	ite	le
 80002cc:	2301      	movle	r3, #1
 80002ce:	2300      	movgt	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d003      	beq.n	80002de <_Z8delay_msi+0x2e>
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e7f1      	b.n	80002c2 <_Z8delay_msi+0x12>
    for (; delay > 0; delay--)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	e7e8      	b.n	80002b8 <_Z8delay_msi+0x8>
        {
            ;
        }
    }
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <_Z11analog_initRb>:

#include <stm32f410rx.h>
#include <stm32f4xx.h>

void analog_init(bool &continous_conv)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
    // Set ADC channel count
    uint32_t channel_count = 0x0000U; // 1 channel to convert
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
    SET_BIT(ADC1->SQR1, channel_count << ADC_SQR1_L_Pos);
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	051b      	lsls	r3, r3, #20
 8000308:	4915      	ldr	r1, [pc, #84]	; (8000360 <_Z11analog_initRb+0x6c>)
 800030a:	4313      	orrs	r3, r2
 800030c:	62cb      	str	r3, [r1, #44]	; 0x2c

    // Set CH1 (PA1 pin) first in sequence.
    SET_BIT(ADC1->SQR3, 0x0001U << ADC_SQR3_SQ1_Pos);
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000312:	4a13      	ldr	r2, [pc, #76]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6353      	str	r3, [r2, #52]	; 0x34

    // Enable continous conversion mode
    if (continous_conv)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d012      	beq.n	8000348 <_Z11analog_initRb+0x54>
    {
        SET_BIT(ADC1->CR2, ADC_CR2_CONT);
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	6093      	str	r3, [r2, #8]
        // ADC ON
        SET_BIT(ADC1->CR2, ADC_CR2_ADON);
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6093      	str	r3, [r2, #8]
        // Start conversion
        SET_BIT(ADC1->CR2, ADC_CR2_SWSTART);
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <_Z11analog_initRb+0x6c>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <_Z11analog_initRb+0x6c>)
 8000340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000344:	6093      	str	r3, [r2, #8]
    }
    else
    {
        CLEAR_BIT(ADC1->CR2, ADC_CR2_CONT);
    }
}
 8000346:	e005      	b.n	8000354 <_Z11analog_initRb+0x60>
        CLEAR_BIT(ADC1->CR2, ADC_CR2_CONT);
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <_Z11analog_initRb+0x6c>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <_Z11analog_initRb+0x6c>)
 800034e:	f023 0302 	bic.w	r3, r3, #2
 8000352:	6093      	str	r3, [r2, #8]
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40012000 	.word	0x40012000

08000364 <_Z16check_analog_pinR18pin_struct_TypeDef>:

bool check_analog_pin(pin_struct_TypeDef &pin)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
    // Checks if pin is analog based on NUCLEO-F410RB board pinout
    if ((pin.GPIOx == GPIOA) && (pin.pinx == 0 || pin.pinx == 1 || pin.pinx == 4))
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <_Z16check_analog_pinR18pin_struct_TypeDef+0x70>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d10d      	bne.n	8000392 <_Z16check_analog_pinR18pin_struct_TypeDef+0x2e>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d007      	beq.n	800038e <_Z16check_analog_pinR18pin_struct_TypeDef+0x2a>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	791b      	ldrb	r3, [r3, #4]
 8000382:	2b01      	cmp	r3, #1
 8000384:	d003      	beq.n	800038e <_Z16check_analog_pinR18pin_struct_TypeDef+0x2a>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	2b04      	cmp	r3, #4
 800038c:	d101      	bne.n	8000392 <_Z16check_analog_pinR18pin_struct_TypeDef+0x2e>
    {
        return true;
 800038e:	2301      	movs	r3, #1
 8000390:	e01a      	b.n	80003c8 <_Z16check_analog_pinR18pin_struct_TypeDef+0x64>
    }

    if ((pin.GPIOx == GPIOB) && (pin.pinx == 0))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <_Z16check_analog_pinR18pin_struct_TypeDef+0x74>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d105      	bne.n	80003a8 <_Z16check_analog_pinR18pin_struct_TypeDef+0x44>
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d101      	bne.n	80003a8 <_Z16check_analog_pinR18pin_struct_TypeDef+0x44>
    {
        return true;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e00f      	b.n	80003c8 <_Z16check_analog_pinR18pin_struct_TypeDef+0x64>
    }

    if ((pin.GPIOx == GPIOC) && (pin.pinx == 0 || pin.pinx == 1))
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <_Z16check_analog_pinR18pin_struct_TypeDef+0x78>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d109      	bne.n	80003c6 <_Z16check_analog_pinR18pin_struct_TypeDef+0x62>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <_Z16check_analog_pinR18pin_struct_TypeDef+0x5e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d101      	bne.n	80003c6 <_Z16check_analog_pinR18pin_struct_TypeDef+0x62>
    {
        return true;
 80003c2:	2301      	movs	r3, #1
 80003c4:	e000      	b.n	80003c8 <_Z16check_analog_pinR18pin_struct_TypeDef+0x64>
    }

    return false;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40020000 	.word	0x40020000
 80003d8:	40020400 	.word	0x40020400
 80003dc:	40020800 	.word	0x40020800

080003e0 <_Z11analog_readRb>:

uint32_t analog_read(bool &continious_conversion)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
    if (!continious_conversion)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	f083 0301 	eor.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d011      	beq.n	800041a <_Z11analog_readRb+0x3a>
    {
        // ADC ON
        SET_BIT(ADC1->CR2, ADC_CR2_ADON);
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <_Z11analog_readRb+0x88>)
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <_Z11analog_readRb+0x88>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6093      	str	r3, [r2, #8]

        // Start conversion
        SET_BIT(ADC1->CR2, ADC_CR2_SWSTART);
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <_Z11analog_readRb+0x88>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <_Z11analog_readRb+0x88>)
 8000408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800040c:	6093      	str	r3, [r2, #8]

        // Set conversion not complete
        CLEAR_BIT(ADC1->SR, ADC_SR_EOC);
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <_Z11analog_readRb+0x88>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a15      	ldr	r2, [pc, #84]	; (8000468 <_Z11analog_readRb+0x88>)
 8000414:	f023 0302 	bic.w	r3, r3, #2
 8000418:	6013      	str	r3, [r2, #0]
    }

    // Wait to conversion to be completeS
    bool ready_to_read = false;
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
    do
    {
        ready_to_read = READ_BIT(ADC1->SR, ADC_SR_EOC) ? true : false;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <_Z11analog_readRb+0x88>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	2b00      	cmp	r3, #0
 8000428:	bf14      	ite	ne
 800042a:	2301      	movne	r3, #1
 800042c:	2300      	moveq	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]
    } while (!ready_to_read);
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <_Z11analog_readRb+0x58>
    do
 8000436:	e7f2      	b.n	800041e <_Z11analog_readRb+0x3e>

    uint32_t read_value = ADC1->DR;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <_Z11analog_readRb+0x88>)
 800043a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043c:	60bb      	str	r3, [r7, #8]

    if (!continious_conversion)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	f083 0301 	eor.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d005      	beq.n	8000458 <_Z11analog_readRb+0x78>
    {
        // End conversion
        CLEAR_BIT(ADC1->CR2, ADC_CR2_SWSTART);
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <_Z11analog_readRb+0x88>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a05      	ldr	r2, [pc, #20]	; (8000468 <_Z11analog_readRb+0x88>)
 8000452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000456:	6093      	str	r3, [r2, #8]
    }

    return read_value;
 8000458:	68bb      	ldr	r3, [r7, #8]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40012000 	.word	0x40012000

0800046c <_Z8read_pinR18pin_struct_TypeDef17pin_state_TypeDef>:
#include <user_types.h>
#include <delay.h>
#include <adc.h>

bool read_pin(pin_struct_TypeDef &pin, pin_state_TypeDef state_bit)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
    uint32_t bit_mask = 0x1U << pin.pinx;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	461a      	mov	r2, r3
 800047e:	2301      	movs	r3, #1
 8000480:	4093      	lsls	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
    if (state_bit == LOW)
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d102      	bne.n	8000490 <_Z8read_pinR18pin_struct_TypeDef17pin_state_TypeDef+0x24>
    {
        bit_mask = ~bit_mask;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	43db      	mvns	r3, r3
 800048e:	60fb      	str	r3, [r7, #12]
    }

    return READ_BIT(pin.GPIOx->IDR, bit_mask);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	691a      	ldr	r2, [r3, #16]
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	4013      	ands	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	bf14      	ite	ne
 800049e:	2301      	movne	r3, #1
 80004a0:	2300      	moveq	r3, #0
 80004a2:	b2db      	uxtb	r3, r3
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>:

pin_struct_TypeDef pin_setup(GPIO_TypeDef *GPIOx, pin_TypeDef pinx, pin_mode_TypeDef mode)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	4611      	mov	r1, r2
 80004bc:	461a      	mov	r2, r3
 80004be:	460b      	mov	r3, r1
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	4613      	mov	r3, r2
 80004c4:	71bb      	strb	r3, [r7, #6]
    pin_struct_TypeDef pin_struct;
    pin_struct.GPIOx = GPIOx;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	601a      	str	r2, [r3, #0]
    pin_struct.pinx = pinx;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	79fa      	ldrb	r2, [r7, #7]
 80004d0:	711a      	strb	r2, [r3, #4]
    pin_struct.mode = mode;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	79ba      	ldrb	r2, [r7, #6]
 80004d6:	715a      	strb	r2, [r3, #5]

    uint32_t mode_pin = 2 * pinx;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	617b      	str	r3, [r7, #20]

    switch (mode)
 80004de:	79bb      	ldrb	r3, [r7, #6]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d020      	beq.n	8000526 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0x76>
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	dc31      	bgt.n	800054c <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0x9c>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00e      	beq.n	800050a <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0x5a>
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d12d      	bne.n	800054c <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0x9c>
    {
    case OUTPUT:
        SET_BIT(pin_struct.GPIOx->MODER, mode << mode_pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	79b9      	ldrb	r1, [r7, #6]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
        break;
 8000508:	e023      	b.n	8000552 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0xa2>
    case INPUT:
        CLEAR_BIT(pin_struct.GPIOx->MODER, mode << mode_pin);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	79b9      	ldrb	r1, [r7, #6]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	400a      	ands	r2, r1
 8000522:	601a      	str	r2, [r3, #0]
        break;
 8000524:	e015      	b.n	8000552 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0xa2>
    case ANALOG:
        // If pin is for analog
        if (check_analog_pin(pin_struct))
 8000526:	68f8      	ldr	r0, [r7, #12]
 8000528:	f7ff ff1c 	bl	8000364 <_Z16check_analog_pinR18pin_struct_TypeDef>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00e      	beq.n	8000550 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0xa0>
        {
            SET_BIT(pin_struct.GPIOx->MODER, mode << mode_pin);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	79b9      	ldrb	r1, [r7, #6]
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	4619      	mov	r1, r3
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	430a      	orrs	r2, r1
 8000548:	601a      	str	r2, [r3, #0]
        }
        break;
 800054a:	e001      	b.n	8000550 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0xa0>
    default:
        break;
 800054c:	bf00      	nop
 800054e:	e000      	b.n	8000552 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef+0xa2>
        break;
 8000550:	bf00      	nop
    }

    return pin_struct;
 8000552:	bf00      	nop
}
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef>:

void set_input_pull_mode(pin_struct_TypeDef &pin, pupd_mode_TypeDef input_mode)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
    if (pin.mode != INPUT)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d14a      	bne.n	8000606 <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xaa>
    {
        return;
    }
    switch (input_mode)
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d849      	bhi.n	800060a <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xae>
 8000576:	a201      	add	r2, pc, #4	; (adr r2, 800057c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0x20>)
 8000578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057c:	0800058d 	.word	0x0800058d
 8000580:	080005cb 	.word	0x080005cb
 8000584:	080005ad 	.word	0x080005ad
 8000588:	080005e9 	.word	0x080005e9
    {
    case NONE:
        CLEAR_BIT(pin.GPIOx->PUPDR, !NONE << 2 * pin.pinx);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	68da      	ldr	r2, [r3, #12]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2101      	movs	r1, #1
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	400a      	ands	r2, r1
 80005a8:	60da      	str	r2, [r3, #12]
        break;
 80005aa:	e02f      	b.n	800060c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xb0>
    case PULLDOWN:
        SET_BIT(pin.GPIOx->PUPDR, PULLDOWN << 2 * pin.pinx);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	68da      	ldr	r2, [r3, #12]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	2102      	movs	r1, #2
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	60da      	str	r2, [r3, #12]
        break;
 80005c8:	e020      	b.n	800060c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xb0>
    case PULLUP:
        SET_BIT(pin.GPIOx->PUPDR, PULLUP << 2 * pin.pinx);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	60da      	str	r2, [r3, #12]
        break;
 80005e6:	e011      	b.n	800060c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xb0>
    case RESERVED:
        SET_BIT(pin.GPIOx->PUPDR, RESERVED << 2 * pin.pinx);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68da      	ldr	r2, [r3, #12]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2103      	movs	r1, #3
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	430a      	orrs	r2, r1
 8000602:	60da      	str	r2, [r3, #12]
        break;
 8000604:	e002      	b.n	800060c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xb0>
        return;
 8000606:	bf00      	nop
 8000608:	e000      	b.n	800060c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef+0xb0>
    default:
        break;
 800060a:	bf00      	nop
    }
}
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef>:

void digital_write(pin_struct_TypeDef &pin, pin_state_TypeDef mode)
{
 8000618:	b480      	push	{r7}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
    if (mode == HIGH)
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d10a      	bne.n	8000640 <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef+0x28>
    {
        uint32_t set_msk = 0x1U << pin.pinx;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	461a      	mov	r2, r3
 8000630:	2301      	movs	r3, #1
 8000632:	4093      	lsls	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
        WRITE_REG(pin.GPIOx->BSRR, set_msk); // set pin
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	619a      	str	r2, [r3, #24]
        return;
 800063e:	e00c      	b.n	800065a <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef+0x42>
    }

    uint32_t reset_pin = (0x1F - (0xF - pin.pinx));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	3310      	adds	r3, #16
 8000646:	617b      	str	r3, [r7, #20]
    uint32_t reset_msk = 0x1U << reset_pin;
 8000648:	2201      	movs	r2, #1
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	613b      	str	r3, [r7, #16]

    WRITE_REG(pin.GPIOx->BSRR, reset_msk); // reset pin
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	619a      	str	r2, [r3, #24]
}
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_Z19led_array_decrementP18pin_struct_TypeDefRiS1_>:

void led_array_decrement(pin_struct_TypeDef LED_pins[9], int &starting_position, int &delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
    int i = starting_position;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	617b      	str	r3, [r7, #20]

    digital_write(LED_pins[i], HIGH);
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4413      	add	r3, r2
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffc9 	bl	8000618 <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef>
    delay_ms(delay);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fe10 	bl	80002b0 <_Z8delay_msi>
    digital_write(LED_pins[i], LOW);
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffbc 	bl	8000618 <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef>

    starting_position--;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	601a      	str	r2, [r3, #0]

    if (starting_position == -1)
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b2:	d102      	bne.n	80006ba <_Z19led_array_decrementP18pin_struct_TypeDefRiS1_+0x56>
    {
        starting_position = 8;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	2208      	movs	r2, #8
 80006b8:	601a      	str	r2, [r3, #0]
    }
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_Z19led_array_incrementP18pin_struct_TypeDefRiS1_>:

void led_array_increment(pin_struct_TypeDef LED_pins[9], int &starting_position, int &delay)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b086      	sub	sp, #24
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
    int i = starting_position;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	617b      	str	r3, [r7, #20]

    digital_write(LED_pins[i], HIGH);
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff9a 	bl	8000618 <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef>
    delay_ms(delay);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fde1 	bl	80002b0 <_Z8delay_msi>
    digital_write(LED_pins[i], LOW);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	4413      	add	r3, r2
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff8d 	bl	8000618 <_Z13digital_writeR18pin_struct_TypeDef17pin_state_TypeDef>

    starting_position++;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	601a      	str	r2, [r3, #0]

    if (starting_position == 9)
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b09      	cmp	r3, #9
 800070e:	d102      	bne.n	8000716 <_Z19led_array_incrementP18pin_struct_TypeDefRiS1_+0x54>
    {
        starting_position = 0;
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
    }
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_Z26linear_distribution_12_bitmm>:

uint32_t linear_distribution_12_bit(uint32_t input_value, uint32_t max_value)
{ // Takes 12bit input value and converts it linearly
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
    if (input_value == 5000)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f241 3288 	movw	r2, #5000	; 0x1388
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <_Z26linear_distribution_12_bitmm+0x18>
    {
        return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e00b      	b.n	800074e <_Z26linear_distribution_12_bitmm+0x30>
    }

    uint32_t linear_value = (input_value * max_value) / 4096;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	0b1b      	lsrs	r3, r3, #12
 8000740:	60fb      	str	r3, [r7, #12]

    if (linear_value <= 9)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b09      	cmp	r3, #9
 8000746:	d801      	bhi.n	800074c <_Z26linear_distribution_12_bitmm+0x2e>
    {
        return 9; // Hard limit, if value aproaches 0
 8000748:	2309      	movs	r3, #9
 800074a:	e000      	b.n	800074e <_Z26linear_distribution_12_bitmm+0x30>
    }
    return linear_value;
 800074c:	68fb      	ldr	r3, [r7, #12]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <_Z10clock_initv>:
pin_struct_TypeDef LED8;
pin_struct_TypeDef BTN0;
pin_struct_TypeDef led_delay_control;

void clock_init()
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  // Clock enable PORT A, B, C
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <_Z10clock_initv+0x40>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <_Z10clock_initv+0x40>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <_Z10clock_initv+0x40>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <_Z10clock_initv+0x40>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <_Z10clock_initv+0x40>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <_Z10clock_initv+0x40>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
  // APB2 clock enable for ADC
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <_Z10clock_initv+0x40>)
 8000786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_Z10clock_initv+0x40>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <_Z8pin_initv>:

void pin_init()
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  // Set LED pins to general purpose output mode
  LED0 = pin_setup(GPIOC, PIN9, OUTPUT);
 80007a6:	4c4b      	ldr	r4, [pc, #300]	; (80008d4 <_Z8pin_initv+0x134>)
 80007a8:	4638      	mov	r0, r7
 80007aa:	2301      	movs	r3, #1
 80007ac:	2209      	movs	r2, #9
 80007ae:	494a      	ldr	r1, [pc, #296]	; (80008d8 <_Z8pin_initv+0x138>)
 80007b0:	f7ff fe7e 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 80007b4:	4622      	mov	r2, r4
 80007b6:	463b      	mov	r3, r7
 80007b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007bc:	e882 0003 	stmia.w	r2, {r0, r1}
  LED1 = pin_setup(GPIOC, PIN8, OUTPUT);
 80007c0:	4c46      	ldr	r4, [pc, #280]	; (80008dc <_Z8pin_initv+0x13c>)
 80007c2:	4638      	mov	r0, r7
 80007c4:	2301      	movs	r3, #1
 80007c6:	2208      	movs	r2, #8
 80007c8:	4943      	ldr	r1, [pc, #268]	; (80008d8 <_Z8pin_initv+0x138>)
 80007ca:	f7ff fe71 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 80007ce:	4622      	mov	r2, r4
 80007d0:	463b      	mov	r3, r7
 80007d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d6:	e882 0003 	stmia.w	r2, {r0, r1}
  LED2 = pin_setup(GPIOB, PIN8, OUTPUT);
 80007da:	4c41      	ldr	r4, [pc, #260]	; (80008e0 <_Z8pin_initv+0x140>)
 80007dc:	4638      	mov	r0, r7
 80007de:	2301      	movs	r3, #1
 80007e0:	2208      	movs	r2, #8
 80007e2:	4940      	ldr	r1, [pc, #256]	; (80008e4 <_Z8pin_initv+0x144>)
 80007e4:	f7ff fe64 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 80007e8:	4622      	mov	r2, r4
 80007ea:	463b      	mov	r3, r7
 80007ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007f0:	e882 0003 	stmia.w	r2, {r0, r1}
  LED3 = pin_setup(GPIOC, PIN6, OUTPUT);
 80007f4:	4c3c      	ldr	r4, [pc, #240]	; (80008e8 <_Z8pin_initv+0x148>)
 80007f6:	4638      	mov	r0, r7
 80007f8:	2301      	movs	r3, #1
 80007fa:	2206      	movs	r2, #6
 80007fc:	4936      	ldr	r1, [pc, #216]	; (80008d8 <_Z8pin_initv+0x138>)
 80007fe:	f7ff fe57 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 8000802:	4622      	mov	r2, r4
 8000804:	463b      	mov	r3, r7
 8000806:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080a:	e882 0003 	stmia.w	r2, {r0, r1}
  LED4 = pin_setup(GPIOB, PIN9, OUTPUT);
 800080e:	4c37      	ldr	r4, [pc, #220]	; (80008ec <_Z8pin_initv+0x14c>)
 8000810:	4638      	mov	r0, r7
 8000812:	2301      	movs	r3, #1
 8000814:	2209      	movs	r2, #9
 8000816:	4933      	ldr	r1, [pc, #204]	; (80008e4 <_Z8pin_initv+0x144>)
 8000818:	f7ff fe4a 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 800081c:	4622      	mov	r2, r4
 800081e:	463b      	mov	r3, r7
 8000820:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000824:	e882 0003 	stmia.w	r2, {r0, r1}
  LED5 = pin_setup(GPIOC, PIN5, OUTPUT);
 8000828:	4c31      	ldr	r4, [pc, #196]	; (80008f0 <_Z8pin_initv+0x150>)
 800082a:	4638      	mov	r0, r7
 800082c:	2301      	movs	r3, #1
 800082e:	2205      	movs	r2, #5
 8000830:	4929      	ldr	r1, [pc, #164]	; (80008d8 <_Z8pin_initv+0x138>)
 8000832:	f7ff fe3d 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 8000836:	4622      	mov	r2, r4
 8000838:	463b      	mov	r3, r7
 800083a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800083e:	e882 0003 	stmia.w	r2, {r0, r1}
  LED6 = pin_setup(GPIOA, PIN12, OUTPUT);
 8000842:	4c2c      	ldr	r4, [pc, #176]	; (80008f4 <_Z8pin_initv+0x154>)
 8000844:	4638      	mov	r0, r7
 8000846:	2301      	movs	r3, #1
 8000848:	220c      	movs	r2, #12
 800084a:	492b      	ldr	r1, [pc, #172]	; (80008f8 <_Z8pin_initv+0x158>)
 800084c:	f7ff fe30 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 8000850:	4622      	mov	r2, r4
 8000852:	463b      	mov	r3, r7
 8000854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000858:	e882 0003 	stmia.w	r2, {r0, r1}
  LED7 = pin_setup(GPIOA, PIN6, OUTPUT);
 800085c:	4c27      	ldr	r4, [pc, #156]	; (80008fc <_Z8pin_initv+0x15c>)
 800085e:	4638      	mov	r0, r7
 8000860:	2301      	movs	r3, #1
 8000862:	2206      	movs	r2, #6
 8000864:	4924      	ldr	r1, [pc, #144]	; (80008f8 <_Z8pin_initv+0x158>)
 8000866:	f7ff fe23 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 800086a:	4622      	mov	r2, r4
 800086c:	463b      	mov	r3, r7
 800086e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000872:	e882 0003 	stmia.w	r2, {r0, r1}
  LED8 = pin_setup(GPIOA, PIN11, OUTPUT);
 8000876:	4c22      	ldr	r4, [pc, #136]	; (8000900 <_Z8pin_initv+0x160>)
 8000878:	4638      	mov	r0, r7
 800087a:	2301      	movs	r3, #1
 800087c:	220b      	movs	r2, #11
 800087e:	491e      	ldr	r1, [pc, #120]	; (80008f8 <_Z8pin_initv+0x158>)
 8000880:	f7ff fe16 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 8000884:	4622      	mov	r2, r4
 8000886:	463b      	mov	r3, r7
 8000888:	e893 0003 	ldmia.w	r3, {r0, r1}
 800088c:	e882 0003 	stmia.w	r2, {r0, r1}
  // Set button input pin and pull mode
  BTN0 = pin_setup(GPIOB, PIN5, INPUT);
 8000890:	4c1c      	ldr	r4, [pc, #112]	; (8000904 <_Z8pin_initv+0x164>)
 8000892:	4638      	mov	r0, r7
 8000894:	2300      	movs	r3, #0
 8000896:	2205      	movs	r2, #5
 8000898:	4912      	ldr	r1, [pc, #72]	; (80008e4 <_Z8pin_initv+0x144>)
 800089a:	f7ff fe09 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 800089e:	4622      	mov	r2, r4
 80008a0:	463b      	mov	r3, r7
 80008a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a6:	e882 0003 	stmia.w	r2, {r0, r1}
  set_input_pull_mode(BTN0, PULLDOWN);
 80008aa:	2102      	movs	r1, #2
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <_Z8pin_initv+0x164>)
 80008ae:	f7ff fe55 	bl	800055c <_Z19set_input_pull_modeR18pin_struct_TypeDef17pupd_mode_TypeDef>
  // Set analog pin
  led_delay_control = pin_setup(GPIOA, PIN1, ANALOG);
 80008b2:	4c15      	ldr	r4, [pc, #84]	; (8000908 <_Z8pin_initv+0x168>)
 80008b4:	4638      	mov	r0, r7
 80008b6:	2303      	movs	r3, #3
 80008b8:	2201      	movs	r2, #1
 80008ba:	490f      	ldr	r1, [pc, #60]	; (80008f8 <_Z8pin_initv+0x158>)
 80008bc:	f7ff fdf8 	bl	80004b0 <_Z9pin_setupP12GPIO_TypeDef11pin_TypeDef16pin_mode_TypeDef>
 80008c0:	4622      	mov	r2, r4
 80008c2:	463b      	mov	r3, r7
 80008c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008c8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	20000080 	.word	0x20000080
 80008d8:	40020800 	.word	0x40020800
 80008dc:	20000088 	.word	0x20000088
 80008e0:	20000090 	.word	0x20000090
 80008e4:	40020400 	.word	0x40020400
 80008e8:	20000098 	.word	0x20000098
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	200000a8 	.word	0x200000a8
 80008f4:	200000b0 	.word	0x200000b0
 80008f8:	40020000 	.word	0x40020000
 80008fc:	200000b8 	.word	0x200000b8
 8000900:	200000c0 	.word	0x200000c0
 8000904:	200000c8 	.word	0x200000c8
 8000908:	200000d0 	.word	0x200000d0

0800090c <main>:

int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0
  bool continous_conversion = true;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  clock_init();
 8000918:	f7ff ff20 	bl	800075c <_Z10clock_initv>
  pin_init();
 800091c:	f7ff ff40 	bl	80007a0 <_Z8pin_initv>
  analog_init(continous_conversion);
 8000920:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fce5 	bl	80002f4 <_Z11analog_initRb>

  pin_struct_TypeDef LED_pins[9] = {LED0, LED1, LED2, LED3, LED4, LED5, LED6, LED7, LED8};
 800092a:	4a3c      	ldr	r2, [pc, #240]	; (8000a1c <main+0x110>)
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000934:	e883 0003 	stmia.w	r3, {r0, r1}
 8000938:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <main+0x114>)
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000942:	e883 0003 	stmia.w	r3, {r0, r1}
 8000946:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <main+0x118>)
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	e883 0003 	stmia.w	r3, {r0, r1}
 8000954:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <main+0x11c>)
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000962:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <main+0x120>)
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000970:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <main+0x124>)
 8000972:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097a:	e883 0003 	stmia.w	r3, {r0, r1}
 800097e:	4a2d      	ldr	r2, [pc, #180]	; (8000a34 <main+0x128>)
 8000980:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000988:	e883 0003 	stmia.w	r3, {r0, r1}
 800098c:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <main+0x12c>)
 800098e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000996:	e883 0003 	stmia.w	r3, {r0, r1}
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <main+0x130>)
 800099c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009a4:	e883 0003 	stmia.w	r3, {r0, r1}

  bool reverse_flag = false;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  int starting_position = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  int delay;

  /* Loop forever */
  do
  {
    delay = linear_distribution_12_bit(analog_read(continous_conversion), 150);
 80009b2:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd12 	bl	80003e0 <_Z11analog_readRb>
 80009bc:	4603      	mov	r3, r0
 80009be:	2196      	movs	r1, #150	; 0x96
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff feac 	bl	800071e <_Z26linear_distribution_12_bitmm>
 80009c6:	4603      	mov	r3, r0
 80009c8:	607b      	str	r3, [r7, #4]

    if (read_pin(BTN0, HIGH))
 80009ca:	2101      	movs	r1, #1
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <main+0x134>)
 80009ce:	f7ff fd4d 	bl	800046c <_Z8read_pinR18pin_struct_TypeDef17pin_state_TypeDef>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <main+0xd8>
    {
      reverse_flag = !reverse_flag;
 80009d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80009dc:	f083 0301 	eor.w	r3, r3, #1
 80009e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    if (reverse_flag)
 80009e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d008      	beq.n	80009fe <main+0xf2>
    {
      led_array_decrement(LED_pins, starting_position, delay);
 80009ec:	1d3a      	adds	r2, r7, #4
 80009ee:	f107 0108 	add.w	r1, r7, #8
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe34 	bl	8000664 <_Z19led_array_decrementP18pin_struct_TypeDefRiS1_>
 80009fc:	e007      	b.n	8000a0e <main+0x102>
    }
    else
    {
      led_array_increment(LED_pins, starting_position, delay);
 80009fe:	1d3a      	adds	r2, r7, #4
 8000a00:	f107 0108 	add.w	r1, r7, #8
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe5a 	bl	80006c2 <_Z19led_array_incrementP18pin_struct_TypeDefRiS1_>
    }

    /*********DEBUG ONLY START*********/
    printf("delay: ", delay);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4619      	mov	r1, r3
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <main+0x138>)
 8000a14:	f000 f918 	bl	8000c48 <iprintf>
    delay = linear_distribution_12_bit(analog_read(continous_conversion), 150);
 8000a18:	e7cb      	b.n	80009b2 <main+0xa6>
 8000a1a:	bf00      	nop
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000088 	.word	0x20000088
 8000a24:	20000090 	.word	0x20000090
 8000a28:	20000098 	.word	0x20000098
 8000a2c:	200000a0 	.word	0x200000a0
 8000a30:	200000a8 	.word	0x200000a8
 8000a34:	200000b0 	.word	0x200000b0
 8000a38:	200000b8 	.word	0x200000b8
 8000a3c:	200000c0 	.word	0x200000c0
 8000a40:	200000c8 	.word	0x200000c8
 8000a44:	08001b7c 	.word	0x08001b7c

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f000 f846 	bl	8000be4 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20008000 	.word	0x20008000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	200000d8 	.word	0x200000d8
 8000b8c:	200000f0 	.word	0x200000f0

08000b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bbe:	f000 f817 	bl	8000bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fea3 	bl	800090c <main>

08000bc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bd4:	08001c24 	.word	0x08001c24
  ldr r2, =_sbss
 8000bd8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bdc:	200000ec 	.word	0x200000ec

08000be0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <__errno>:
 8000be4:	4b01      	ldr	r3, [pc, #4]	; (8000bec <__errno+0x8>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000000 	.word	0x20000000

08000bf0 <__libc_init_array>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	4d0d      	ldr	r5, [pc, #52]	; (8000c28 <__libc_init_array+0x38>)
 8000bf4:	4c0d      	ldr	r4, [pc, #52]	; (8000c2c <__libc_init_array+0x3c>)
 8000bf6:	1b64      	subs	r4, r4, r5
 8000bf8:	10a4      	asrs	r4, r4, #2
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	42a6      	cmp	r6, r4
 8000bfe:	d109      	bne.n	8000c14 <__libc_init_array+0x24>
 8000c00:	4d0b      	ldr	r5, [pc, #44]	; (8000c30 <__libc_init_array+0x40>)
 8000c02:	4c0c      	ldr	r4, [pc, #48]	; (8000c34 <__libc_init_array+0x44>)
 8000c04:	f000 ffae 	bl	8001b64 <_init>
 8000c08:	1b64      	subs	r4, r4, r5
 8000c0a:	10a4      	asrs	r4, r4, #2
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	42a6      	cmp	r6, r4
 8000c10:	d105      	bne.n	8000c1e <__libc_init_array+0x2e>
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
 8000c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c18:	4798      	blx	r3
 8000c1a:	3601      	adds	r6, #1
 8000c1c:	e7ee      	b.n	8000bfc <__libc_init_array+0xc>
 8000c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c22:	4798      	blx	r3
 8000c24:	3601      	adds	r6, #1
 8000c26:	e7f2      	b.n	8000c0e <__libc_init_array+0x1e>
 8000c28:	08001c1c 	.word	0x08001c1c
 8000c2c:	08001c1c 	.word	0x08001c1c
 8000c30:	08001c1c 	.word	0x08001c1c
 8000c34:	08001c20 	.word	0x08001c20

08000c38 <memset>:
 8000c38:	4402      	add	r2, r0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <memset+0xa>
 8000c40:	4770      	bx	lr
 8000c42:	f803 1b01 	strb.w	r1, [r3], #1
 8000c46:	e7f9      	b.n	8000c3c <memset+0x4>

08000c48 <iprintf>:
 8000c48:	b40f      	push	{r0, r1, r2, r3}
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <iprintf+0x2c>)
 8000c4c:	b513      	push	{r0, r1, r4, lr}
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	b124      	cbz	r4, 8000c5c <iprintf+0x14>
 8000c52:	69a3      	ldr	r3, [r4, #24]
 8000c54:	b913      	cbnz	r3, 8000c5c <iprintf+0x14>
 8000c56:	4620      	mov	r0, r4
 8000c58:	f000 f866 	bl	8000d28 <__sinit>
 8000c5c:	ab05      	add	r3, sp, #20
 8000c5e:	9a04      	ldr	r2, [sp, #16]
 8000c60:	68a1      	ldr	r1, [r4, #8]
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	4620      	mov	r0, r4
 8000c66:	f000 f9bd 	bl	8000fe4 <_vfiprintf_r>
 8000c6a:	b002      	add	sp, #8
 8000c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c70:	b004      	add	sp, #16
 8000c72:	4770      	bx	lr
 8000c74:	20000000 	.word	0x20000000

08000c78 <std>:
 8000c78:	2300      	movs	r3, #0
 8000c7a:	b510      	push	{r4, lr}
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c86:	6083      	str	r3, [r0, #8]
 8000c88:	8181      	strh	r1, [r0, #12]
 8000c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8000c8c:	81c2      	strh	r2, [r0, #14]
 8000c8e:	6183      	str	r3, [r0, #24]
 8000c90:	4619      	mov	r1, r3
 8000c92:	2208      	movs	r2, #8
 8000c94:	305c      	adds	r0, #92	; 0x5c
 8000c96:	f7ff ffcf 	bl	8000c38 <memset>
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <std+0x38>)
 8000c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <std+0x3c>)
 8000ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <std+0x40>)
 8000ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <std+0x44>)
 8000ca8:	6224      	str	r4, [r4, #32]
 8000caa:	6323      	str	r3, [r4, #48]	; 0x30
 8000cac:	bd10      	pop	{r4, pc}
 8000cae:	bf00      	nop
 8000cb0:	0800158d 	.word	0x0800158d
 8000cb4:	080015af 	.word	0x080015af
 8000cb8:	080015e7 	.word	0x080015e7
 8000cbc:	0800160b 	.word	0x0800160b

08000cc0 <_cleanup_r>:
 8000cc0:	4901      	ldr	r1, [pc, #4]	; (8000cc8 <_cleanup_r+0x8>)
 8000cc2:	f000 b8af 	b.w	8000e24 <_fwalk_reent>
 8000cc6:	bf00      	nop
 8000cc8:	080018e5 	.word	0x080018e5

08000ccc <__sfmoreglue>:
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	2268      	movs	r2, #104	; 0x68
 8000cd0:	1e4d      	subs	r5, r1, #1
 8000cd2:	4355      	muls	r5, r2
 8000cd4:	460e      	mov	r6, r1
 8000cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cda:	f000 f8e5 	bl	8000ea8 <_malloc_r>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	b140      	cbz	r0, 8000cf4 <__sfmoreglue+0x28>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ce8:	300c      	adds	r0, #12
 8000cea:	60a0      	str	r0, [r4, #8]
 8000cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cf0:	f7ff ffa2 	bl	8000c38 <memset>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}

08000cf8 <__sfp_lock_acquire>:
 8000cf8:	4801      	ldr	r0, [pc, #4]	; (8000d00 <__sfp_lock_acquire+0x8>)
 8000cfa:	f000 b8b3 	b.w	8000e64 <__retarget_lock_acquire_recursive>
 8000cfe:	bf00      	nop
 8000d00:	200000dd 	.word	0x200000dd

08000d04 <__sfp_lock_release>:
 8000d04:	4801      	ldr	r0, [pc, #4]	; (8000d0c <__sfp_lock_release+0x8>)
 8000d06:	f000 b8ae 	b.w	8000e66 <__retarget_lock_release_recursive>
 8000d0a:	bf00      	nop
 8000d0c:	200000dd 	.word	0x200000dd

08000d10 <__sinit_lock_acquire>:
 8000d10:	4801      	ldr	r0, [pc, #4]	; (8000d18 <__sinit_lock_acquire+0x8>)
 8000d12:	f000 b8a7 	b.w	8000e64 <__retarget_lock_acquire_recursive>
 8000d16:	bf00      	nop
 8000d18:	200000de 	.word	0x200000de

08000d1c <__sinit_lock_release>:
 8000d1c:	4801      	ldr	r0, [pc, #4]	; (8000d24 <__sinit_lock_release+0x8>)
 8000d1e:	f000 b8a2 	b.w	8000e66 <__retarget_lock_release_recursive>
 8000d22:	bf00      	nop
 8000d24:	200000de 	.word	0x200000de

08000d28 <__sinit>:
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fff0 	bl	8000d10 <__sinit_lock_acquire>
 8000d30:	69a3      	ldr	r3, [r4, #24]
 8000d32:	b11b      	cbz	r3, 8000d3c <__sinit+0x14>
 8000d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d38:	f7ff bff0 	b.w	8000d1c <__sinit_lock_release>
 8000d3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d40:	6523      	str	r3, [r4, #80]	; 0x50
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <__sinit+0x68>)
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <__sinit+0x6c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	bf04      	itt	eq
 8000d4e:	2301      	moveq	r3, #1
 8000d50:	61a3      	streq	r3, [r4, #24]
 8000d52:	4620      	mov	r0, r4
 8000d54:	f000 f820 	bl	8000d98 <__sfp>
 8000d58:	6060      	str	r0, [r4, #4]
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 f81c 	bl	8000d98 <__sfp>
 8000d60:	60a0      	str	r0, [r4, #8]
 8000d62:	4620      	mov	r0, r4
 8000d64:	f000 f818 	bl	8000d98 <__sfp>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60e0      	str	r0, [r4, #12]
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	6860      	ldr	r0, [r4, #4]
 8000d70:	f7ff ff82 	bl	8000c78 <std>
 8000d74:	68a0      	ldr	r0, [r4, #8]
 8000d76:	2201      	movs	r2, #1
 8000d78:	2109      	movs	r1, #9
 8000d7a:	f7ff ff7d 	bl	8000c78 <std>
 8000d7e:	68e0      	ldr	r0, [r4, #12]
 8000d80:	2202      	movs	r2, #2
 8000d82:	2112      	movs	r1, #18
 8000d84:	f7ff ff78 	bl	8000c78 <std>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61a3      	str	r3, [r4, #24]
 8000d8c:	e7d2      	b.n	8000d34 <__sinit+0xc>
 8000d8e:	bf00      	nop
 8000d90:	08001b84 	.word	0x08001b84
 8000d94:	08000cc1 	.word	0x08000cc1

08000d98 <__sfp>:
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9a:	4607      	mov	r7, r0
 8000d9c:	f7ff ffac 	bl	8000cf8 <__sfp_lock_acquire>
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <__sfp+0x84>)
 8000da2:	681e      	ldr	r6, [r3, #0]
 8000da4:	69b3      	ldr	r3, [r6, #24]
 8000da6:	b913      	cbnz	r3, 8000dae <__sfp+0x16>
 8000da8:	4630      	mov	r0, r6
 8000daa:	f7ff ffbd 	bl	8000d28 <__sinit>
 8000dae:	3648      	adds	r6, #72	; 0x48
 8000db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	d503      	bpl.n	8000dc0 <__sfp+0x28>
 8000db8:	6833      	ldr	r3, [r6, #0]
 8000dba:	b30b      	cbz	r3, 8000e00 <__sfp+0x68>
 8000dbc:	6836      	ldr	r6, [r6, #0]
 8000dbe:	e7f7      	b.n	8000db0 <__sfp+0x18>
 8000dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000dc4:	b9d5      	cbnz	r5, 8000dfc <__sfp+0x64>
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <__sfp+0x88>)
 8000dc8:	60e3      	str	r3, [r4, #12]
 8000dca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000dce:	6665      	str	r5, [r4, #100]	; 0x64
 8000dd0:	f000 f847 	bl	8000e62 <__retarget_lock_init_recursive>
 8000dd4:	f7ff ff96 	bl	8000d04 <__sfp_lock_release>
 8000dd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000de0:	6025      	str	r5, [r4, #0]
 8000de2:	61a5      	str	r5, [r4, #24]
 8000de4:	2208      	movs	r2, #8
 8000de6:	4629      	mov	r1, r5
 8000de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dec:	f7ff ff24 	bl	8000c38 <memset>
 8000df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000df8:	4620      	mov	r0, r4
 8000dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dfc:	3468      	adds	r4, #104	; 0x68
 8000dfe:	e7d9      	b.n	8000db4 <__sfp+0x1c>
 8000e00:	2104      	movs	r1, #4
 8000e02:	4638      	mov	r0, r7
 8000e04:	f7ff ff62 	bl	8000ccc <__sfmoreglue>
 8000e08:	4604      	mov	r4, r0
 8000e0a:	6030      	str	r0, [r6, #0]
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d1d5      	bne.n	8000dbc <__sfp+0x24>
 8000e10:	f7ff ff78 	bl	8000d04 <__sfp_lock_release>
 8000e14:	230c      	movs	r3, #12
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	e7ee      	b.n	8000df8 <__sfp+0x60>
 8000e1a:	bf00      	nop
 8000e1c:	08001b84 	.word	0x08001b84
 8000e20:	ffff0001 	.word	0xffff0001

08000e24 <_fwalk_reent>:
 8000e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4688      	mov	r8, r1
 8000e2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e30:	2700      	movs	r7, #0
 8000e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e36:	f1b9 0901 	subs.w	r9, r9, #1
 8000e3a:	d505      	bpl.n	8000e48 <_fwalk_reent+0x24>
 8000e3c:	6824      	ldr	r4, [r4, #0]
 8000e3e:	2c00      	cmp	r4, #0
 8000e40:	d1f7      	bne.n	8000e32 <_fwalk_reent+0xe>
 8000e42:	4638      	mov	r0, r7
 8000e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e48:	89ab      	ldrh	r3, [r5, #12]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d907      	bls.n	8000e5e <_fwalk_reent+0x3a>
 8000e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e52:	3301      	adds	r3, #1
 8000e54:	d003      	beq.n	8000e5e <_fwalk_reent+0x3a>
 8000e56:	4629      	mov	r1, r5
 8000e58:	4630      	mov	r0, r6
 8000e5a:	47c0      	blx	r8
 8000e5c:	4307      	orrs	r7, r0
 8000e5e:	3568      	adds	r5, #104	; 0x68
 8000e60:	e7e9      	b.n	8000e36 <_fwalk_reent+0x12>

08000e62 <__retarget_lock_init_recursive>:
 8000e62:	4770      	bx	lr

08000e64 <__retarget_lock_acquire_recursive>:
 8000e64:	4770      	bx	lr

08000e66 <__retarget_lock_release_recursive>:
 8000e66:	4770      	bx	lr

08000e68 <sbrk_aligned>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	4e0e      	ldr	r6, [pc, #56]	; (8000ea4 <sbrk_aligned+0x3c>)
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	6831      	ldr	r1, [r6, #0]
 8000e70:	4605      	mov	r5, r0
 8000e72:	b911      	cbnz	r1, 8000e7a <sbrk_aligned+0x12>
 8000e74:	f000 fb7a 	bl	800156c <_sbrk_r>
 8000e78:	6030      	str	r0, [r6, #0]
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f000 fb75 	bl	800156c <_sbrk_r>
 8000e82:	1c43      	adds	r3, r0, #1
 8000e84:	d00a      	beq.n	8000e9c <sbrk_aligned+0x34>
 8000e86:	1cc4      	adds	r4, r0, #3
 8000e88:	f024 0403 	bic.w	r4, r4, #3
 8000e8c:	42a0      	cmp	r0, r4
 8000e8e:	d007      	beq.n	8000ea0 <sbrk_aligned+0x38>
 8000e90:	1a21      	subs	r1, r4, r0
 8000e92:	4628      	mov	r0, r5
 8000e94:	f000 fb6a 	bl	800156c <_sbrk_r>
 8000e98:	3001      	adds	r0, #1
 8000e9a:	d101      	bne.n	8000ea0 <sbrk_aligned+0x38>
 8000e9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 8000ea4:	200000e4 	.word	0x200000e4

08000ea8 <_malloc_r>:
 8000ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eac:	1ccd      	adds	r5, r1, #3
 8000eae:	f025 0503 	bic.w	r5, r5, #3
 8000eb2:	3508      	adds	r5, #8
 8000eb4:	2d0c      	cmp	r5, #12
 8000eb6:	bf38      	it	cc
 8000eb8:	250c      	movcc	r5, #12
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	4607      	mov	r7, r0
 8000ebe:	db01      	blt.n	8000ec4 <_malloc_r+0x1c>
 8000ec0:	42a9      	cmp	r1, r5
 8000ec2:	d905      	bls.n	8000ed0 <_malloc_r+0x28>
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	2600      	movs	r6, #0
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ed0:	4e2e      	ldr	r6, [pc, #184]	; (8000f8c <_malloc_r+0xe4>)
 8000ed2:	f000 fdbb 	bl	8001a4c <__malloc_lock>
 8000ed6:	6833      	ldr	r3, [r6, #0]
 8000ed8:	461c      	mov	r4, r3
 8000eda:	bb34      	cbnz	r4, 8000f2a <_malloc_r+0x82>
 8000edc:	4629      	mov	r1, r5
 8000ede:	4638      	mov	r0, r7
 8000ee0:	f7ff ffc2 	bl	8000e68 <sbrk_aligned>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	d14d      	bne.n	8000f86 <_malloc_r+0xde>
 8000eea:	6834      	ldr	r4, [r6, #0]
 8000eec:	4626      	mov	r6, r4
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	d140      	bne.n	8000f74 <_malloc_r+0xcc>
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	eb04 0803 	add.w	r8, r4, r3
 8000efc:	f000 fb36 	bl	800156c <_sbrk_r>
 8000f00:	4580      	cmp	r8, r0
 8000f02:	d13a      	bne.n	8000f7a <_malloc_r+0xd2>
 8000f04:	6821      	ldr	r1, [r4, #0]
 8000f06:	3503      	adds	r5, #3
 8000f08:	1a6d      	subs	r5, r5, r1
 8000f0a:	f025 0503 	bic.w	r5, r5, #3
 8000f0e:	3508      	adds	r5, #8
 8000f10:	2d0c      	cmp	r5, #12
 8000f12:	bf38      	it	cc
 8000f14:	250c      	movcc	r5, #12
 8000f16:	4629      	mov	r1, r5
 8000f18:	4638      	mov	r0, r7
 8000f1a:	f7ff ffa5 	bl	8000e68 <sbrk_aligned>
 8000f1e:	3001      	adds	r0, #1
 8000f20:	d02b      	beq.n	8000f7a <_malloc_r+0xd2>
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	442b      	add	r3, r5
 8000f26:	6023      	str	r3, [r4, #0]
 8000f28:	e00e      	b.n	8000f48 <_malloc_r+0xa0>
 8000f2a:	6822      	ldr	r2, [r4, #0]
 8000f2c:	1b52      	subs	r2, r2, r5
 8000f2e:	d41e      	bmi.n	8000f6e <_malloc_r+0xc6>
 8000f30:	2a0b      	cmp	r2, #11
 8000f32:	d916      	bls.n	8000f62 <_malloc_r+0xba>
 8000f34:	1961      	adds	r1, r4, r5
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	6025      	str	r5, [r4, #0]
 8000f3a:	bf18      	it	ne
 8000f3c:	6059      	strne	r1, [r3, #4]
 8000f3e:	6863      	ldr	r3, [r4, #4]
 8000f40:	bf08      	it	eq
 8000f42:	6031      	streq	r1, [r6, #0]
 8000f44:	5162      	str	r2, [r4, r5]
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f104 060b 	add.w	r6, r4, #11
 8000f4e:	f000 fd83 	bl	8001a58 <__malloc_unlock>
 8000f52:	f026 0607 	bic.w	r6, r6, #7
 8000f56:	1d23      	adds	r3, r4, #4
 8000f58:	1af2      	subs	r2, r6, r3
 8000f5a:	d0b6      	beq.n	8000eca <_malloc_r+0x22>
 8000f5c:	1b9b      	subs	r3, r3, r6
 8000f5e:	50a3      	str	r3, [r4, r2]
 8000f60:	e7b3      	b.n	8000eca <_malloc_r+0x22>
 8000f62:	6862      	ldr	r2, [r4, #4]
 8000f64:	42a3      	cmp	r3, r4
 8000f66:	bf0c      	ite	eq
 8000f68:	6032      	streq	r2, [r6, #0]
 8000f6a:	605a      	strne	r2, [r3, #4]
 8000f6c:	e7ec      	b.n	8000f48 <_malloc_r+0xa0>
 8000f6e:	4623      	mov	r3, r4
 8000f70:	6864      	ldr	r4, [r4, #4]
 8000f72:	e7b2      	b.n	8000eda <_malloc_r+0x32>
 8000f74:	4634      	mov	r4, r6
 8000f76:	6876      	ldr	r6, [r6, #4]
 8000f78:	e7b9      	b.n	8000eee <_malloc_r+0x46>
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4638      	mov	r0, r7
 8000f80:	f000 fd6a 	bl	8001a58 <__malloc_unlock>
 8000f84:	e7a1      	b.n	8000eca <_malloc_r+0x22>
 8000f86:	6025      	str	r5, [r4, #0]
 8000f88:	e7de      	b.n	8000f48 <_malloc_r+0xa0>
 8000f8a:	bf00      	nop
 8000f8c:	200000e0 	.word	0x200000e0

08000f90 <__sfputc_r>:
 8000f90:	6893      	ldr	r3, [r2, #8]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	b410      	push	{r4}
 8000f98:	6093      	str	r3, [r2, #8]
 8000f9a:	da08      	bge.n	8000fae <__sfputc_r+0x1e>
 8000f9c:	6994      	ldr	r4, [r2, #24]
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	db01      	blt.n	8000fa6 <__sfputc_r+0x16>
 8000fa2:	290a      	cmp	r1, #10
 8000fa4:	d103      	bne.n	8000fae <__sfputc_r+0x1e>
 8000fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000faa:	f000 bb33 	b.w	8001614 <__swbuf_r>
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	1c58      	adds	r0, r3, #1
 8000fb2:	6010      	str	r0, [r2, #0]
 8000fb4:	7019      	strb	r1, [r3, #0]
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <__sfputs_r>:
 8000fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	460f      	mov	r7, r1
 8000fc4:	4614      	mov	r4, r2
 8000fc6:	18d5      	adds	r5, r2, r3
 8000fc8:	42ac      	cmp	r4, r5
 8000fca:	d101      	bne.n	8000fd0 <__sfputs_r+0x12>
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e007      	b.n	8000fe0 <__sfputs_r+0x22>
 8000fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fd4:	463a      	mov	r2, r7
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f7ff ffda 	bl	8000f90 <__sfputc_r>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d1f3      	bne.n	8000fc8 <__sfputs_r+0xa>
 8000fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fe4 <_vfiprintf_r>:
 8000fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe8:	460d      	mov	r5, r1
 8000fea:	b09d      	sub	sp, #116	; 0x74
 8000fec:	4614      	mov	r4, r2
 8000fee:	4698      	mov	r8, r3
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	b118      	cbz	r0, 8000ffc <_vfiprintf_r+0x18>
 8000ff4:	6983      	ldr	r3, [r0, #24]
 8000ff6:	b90b      	cbnz	r3, 8000ffc <_vfiprintf_r+0x18>
 8000ff8:	f7ff fe96 	bl	8000d28 <__sinit>
 8000ffc:	4b89      	ldr	r3, [pc, #548]	; (8001224 <_vfiprintf_r+0x240>)
 8000ffe:	429d      	cmp	r5, r3
 8001000:	d11b      	bne.n	800103a <_vfiprintf_r+0x56>
 8001002:	6875      	ldr	r5, [r6, #4]
 8001004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001006:	07d9      	lsls	r1, r3, #31
 8001008:	d405      	bmi.n	8001016 <_vfiprintf_r+0x32>
 800100a:	89ab      	ldrh	r3, [r5, #12]
 800100c:	059a      	lsls	r2, r3, #22
 800100e:	d402      	bmi.n	8001016 <_vfiprintf_r+0x32>
 8001010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001012:	f7ff ff27 	bl	8000e64 <__retarget_lock_acquire_recursive>
 8001016:	89ab      	ldrh	r3, [r5, #12]
 8001018:	071b      	lsls	r3, r3, #28
 800101a:	d501      	bpl.n	8001020 <_vfiprintf_r+0x3c>
 800101c:	692b      	ldr	r3, [r5, #16]
 800101e:	b9eb      	cbnz	r3, 800105c <_vfiprintf_r+0x78>
 8001020:	4629      	mov	r1, r5
 8001022:	4630      	mov	r0, r6
 8001024:	f000 fb5a 	bl	80016dc <__swsetup_r>
 8001028:	b1c0      	cbz	r0, 800105c <_vfiprintf_r+0x78>
 800102a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800102c:	07dc      	lsls	r4, r3, #31
 800102e:	d50e      	bpl.n	800104e <_vfiprintf_r+0x6a>
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	b01d      	add	sp, #116	; 0x74
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <_vfiprintf_r+0x244>)
 800103c:	429d      	cmp	r5, r3
 800103e:	d101      	bne.n	8001044 <_vfiprintf_r+0x60>
 8001040:	68b5      	ldr	r5, [r6, #8]
 8001042:	e7df      	b.n	8001004 <_vfiprintf_r+0x20>
 8001044:	4b79      	ldr	r3, [pc, #484]	; (800122c <_vfiprintf_r+0x248>)
 8001046:	429d      	cmp	r5, r3
 8001048:	bf08      	it	eq
 800104a:	68f5      	ldreq	r5, [r6, #12]
 800104c:	e7da      	b.n	8001004 <_vfiprintf_r+0x20>
 800104e:	89ab      	ldrh	r3, [r5, #12]
 8001050:	0598      	lsls	r0, r3, #22
 8001052:	d4ed      	bmi.n	8001030 <_vfiprintf_r+0x4c>
 8001054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001056:	f7ff ff06 	bl	8000e66 <__retarget_lock_release_recursive>
 800105a:	e7e9      	b.n	8001030 <_vfiprintf_r+0x4c>
 800105c:	2300      	movs	r3, #0
 800105e:	9309      	str	r3, [sp, #36]	; 0x24
 8001060:	2320      	movs	r3, #32
 8001062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001066:	f8cd 800c 	str.w	r8, [sp, #12]
 800106a:	2330      	movs	r3, #48	; 0x30
 800106c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001230 <_vfiprintf_r+0x24c>
 8001070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001074:	f04f 0901 	mov.w	r9, #1
 8001078:	4623      	mov	r3, r4
 800107a:	469a      	mov	sl, r3
 800107c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001080:	b10a      	cbz	r2, 8001086 <_vfiprintf_r+0xa2>
 8001082:	2a25      	cmp	r2, #37	; 0x25
 8001084:	d1f9      	bne.n	800107a <_vfiprintf_r+0x96>
 8001086:	ebba 0b04 	subs.w	fp, sl, r4
 800108a:	d00b      	beq.n	80010a4 <_vfiprintf_r+0xc0>
 800108c:	465b      	mov	r3, fp
 800108e:	4622      	mov	r2, r4
 8001090:	4629      	mov	r1, r5
 8001092:	4630      	mov	r0, r6
 8001094:	f7ff ff93 	bl	8000fbe <__sfputs_r>
 8001098:	3001      	adds	r0, #1
 800109a:	f000 80aa 	beq.w	80011f2 <_vfiprintf_r+0x20e>
 800109e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010a0:	445a      	add	r2, fp
 80010a2:	9209      	str	r2, [sp, #36]	; 0x24
 80010a4:	f89a 3000 	ldrb.w	r3, [sl]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80a2 	beq.w	80011f2 <_vfiprintf_r+0x20e>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010b8:	f10a 0a01 	add.w	sl, sl, #1
 80010bc:	9304      	str	r3, [sp, #16]
 80010be:	9307      	str	r3, [sp, #28]
 80010c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010c4:	931a      	str	r3, [sp, #104]	; 0x68
 80010c6:	4654      	mov	r4, sl
 80010c8:	2205      	movs	r2, #5
 80010ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ce:	4858      	ldr	r0, [pc, #352]	; (8001230 <_vfiprintf_r+0x24c>)
 80010d0:	f7ff f89e 	bl	8000210 <memchr>
 80010d4:	9a04      	ldr	r2, [sp, #16]
 80010d6:	b9d8      	cbnz	r0, 8001110 <_vfiprintf_r+0x12c>
 80010d8:	06d1      	lsls	r1, r2, #27
 80010da:	bf44      	itt	mi
 80010dc:	2320      	movmi	r3, #32
 80010de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010e2:	0713      	lsls	r3, r2, #28
 80010e4:	bf44      	itt	mi
 80010e6:	232b      	movmi	r3, #43	; 0x2b
 80010e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010ec:	f89a 3000 	ldrb.w	r3, [sl]
 80010f0:	2b2a      	cmp	r3, #42	; 0x2a
 80010f2:	d015      	beq.n	8001120 <_vfiprintf_r+0x13c>
 80010f4:	9a07      	ldr	r2, [sp, #28]
 80010f6:	4654      	mov	r4, sl
 80010f8:	2000      	movs	r0, #0
 80010fa:	f04f 0c0a 	mov.w	ip, #10
 80010fe:	4621      	mov	r1, r4
 8001100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001104:	3b30      	subs	r3, #48	; 0x30
 8001106:	2b09      	cmp	r3, #9
 8001108:	d94e      	bls.n	80011a8 <_vfiprintf_r+0x1c4>
 800110a:	b1b0      	cbz	r0, 800113a <_vfiprintf_r+0x156>
 800110c:	9207      	str	r2, [sp, #28]
 800110e:	e014      	b.n	800113a <_vfiprintf_r+0x156>
 8001110:	eba0 0308 	sub.w	r3, r0, r8
 8001114:	fa09 f303 	lsl.w	r3, r9, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	9304      	str	r3, [sp, #16]
 800111c:	46a2      	mov	sl, r4
 800111e:	e7d2      	b.n	80010c6 <_vfiprintf_r+0xe2>
 8001120:	9b03      	ldr	r3, [sp, #12]
 8001122:	1d19      	adds	r1, r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	9103      	str	r1, [sp, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	bfbb      	ittet	lt
 800112c:	425b      	neglt	r3, r3
 800112e:	f042 0202 	orrlt.w	r2, r2, #2
 8001132:	9307      	strge	r3, [sp, #28]
 8001134:	9307      	strlt	r3, [sp, #28]
 8001136:	bfb8      	it	lt
 8001138:	9204      	strlt	r2, [sp, #16]
 800113a:	7823      	ldrb	r3, [r4, #0]
 800113c:	2b2e      	cmp	r3, #46	; 0x2e
 800113e:	d10c      	bne.n	800115a <_vfiprintf_r+0x176>
 8001140:	7863      	ldrb	r3, [r4, #1]
 8001142:	2b2a      	cmp	r3, #42	; 0x2a
 8001144:	d135      	bne.n	80011b2 <_vfiprintf_r+0x1ce>
 8001146:	9b03      	ldr	r3, [sp, #12]
 8001148:	1d1a      	adds	r2, r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	9203      	str	r2, [sp, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfb8      	it	lt
 8001152:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001156:	3402      	adds	r4, #2
 8001158:	9305      	str	r3, [sp, #20]
 800115a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001240 <_vfiprintf_r+0x25c>
 800115e:	7821      	ldrb	r1, [r4, #0]
 8001160:	2203      	movs	r2, #3
 8001162:	4650      	mov	r0, sl
 8001164:	f7ff f854 	bl	8000210 <memchr>
 8001168:	b140      	cbz	r0, 800117c <_vfiprintf_r+0x198>
 800116a:	2340      	movs	r3, #64	; 0x40
 800116c:	eba0 000a 	sub.w	r0, r0, sl
 8001170:	fa03 f000 	lsl.w	r0, r3, r0
 8001174:	9b04      	ldr	r3, [sp, #16]
 8001176:	4303      	orrs	r3, r0
 8001178:	3401      	adds	r4, #1
 800117a:	9304      	str	r3, [sp, #16]
 800117c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001180:	482c      	ldr	r0, [pc, #176]	; (8001234 <_vfiprintf_r+0x250>)
 8001182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001186:	2206      	movs	r2, #6
 8001188:	f7ff f842 	bl	8000210 <memchr>
 800118c:	2800      	cmp	r0, #0
 800118e:	d03f      	beq.n	8001210 <_vfiprintf_r+0x22c>
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <_vfiprintf_r+0x254>)
 8001192:	bb1b      	cbnz	r3, 80011dc <_vfiprintf_r+0x1f8>
 8001194:	9b03      	ldr	r3, [sp, #12]
 8001196:	3307      	adds	r3, #7
 8001198:	f023 0307 	bic.w	r3, r3, #7
 800119c:	3308      	adds	r3, #8
 800119e:	9303      	str	r3, [sp, #12]
 80011a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011a2:	443b      	add	r3, r7
 80011a4:	9309      	str	r3, [sp, #36]	; 0x24
 80011a6:	e767      	b.n	8001078 <_vfiprintf_r+0x94>
 80011a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80011ac:	460c      	mov	r4, r1
 80011ae:	2001      	movs	r0, #1
 80011b0:	e7a5      	b.n	80010fe <_vfiprintf_r+0x11a>
 80011b2:	2300      	movs	r3, #0
 80011b4:	3401      	adds	r4, #1
 80011b6:	9305      	str	r3, [sp, #20]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 0c0a 	mov.w	ip, #10
 80011be:	4620      	mov	r0, r4
 80011c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011c4:	3a30      	subs	r2, #48	; 0x30
 80011c6:	2a09      	cmp	r2, #9
 80011c8:	d903      	bls.n	80011d2 <_vfiprintf_r+0x1ee>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0c5      	beq.n	800115a <_vfiprintf_r+0x176>
 80011ce:	9105      	str	r1, [sp, #20]
 80011d0:	e7c3      	b.n	800115a <_vfiprintf_r+0x176>
 80011d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80011d6:	4604      	mov	r4, r0
 80011d8:	2301      	movs	r3, #1
 80011da:	e7f0      	b.n	80011be <_vfiprintf_r+0x1da>
 80011dc:	ab03      	add	r3, sp, #12
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	462a      	mov	r2, r5
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <_vfiprintf_r+0x258>)
 80011e4:	a904      	add	r1, sp, #16
 80011e6:	4630      	mov	r0, r6
 80011e8:	f3af 8000 	nop.w
 80011ec:	4607      	mov	r7, r0
 80011ee:	1c78      	adds	r0, r7, #1
 80011f0:	d1d6      	bne.n	80011a0 <_vfiprintf_r+0x1bc>
 80011f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011f4:	07d9      	lsls	r1, r3, #31
 80011f6:	d405      	bmi.n	8001204 <_vfiprintf_r+0x220>
 80011f8:	89ab      	ldrh	r3, [r5, #12]
 80011fa:	059a      	lsls	r2, r3, #22
 80011fc:	d402      	bmi.n	8001204 <_vfiprintf_r+0x220>
 80011fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001200:	f7ff fe31 	bl	8000e66 <__retarget_lock_release_recursive>
 8001204:	89ab      	ldrh	r3, [r5, #12]
 8001206:	065b      	lsls	r3, r3, #25
 8001208:	f53f af12 	bmi.w	8001030 <_vfiprintf_r+0x4c>
 800120c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800120e:	e711      	b.n	8001034 <_vfiprintf_r+0x50>
 8001210:	ab03      	add	r3, sp, #12
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	462a      	mov	r2, r5
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <_vfiprintf_r+0x258>)
 8001218:	a904      	add	r1, sp, #16
 800121a:	4630      	mov	r0, r6
 800121c:	f000 f880 	bl	8001320 <_printf_i>
 8001220:	e7e4      	b.n	80011ec <_vfiprintf_r+0x208>
 8001222:	bf00      	nop
 8001224:	08001ba8 	.word	0x08001ba8
 8001228:	08001bc8 	.word	0x08001bc8
 800122c:	08001b88 	.word	0x08001b88
 8001230:	08001be8 	.word	0x08001be8
 8001234:	08001bf2 	.word	0x08001bf2
 8001238:	00000000 	.word	0x00000000
 800123c:	08000fbf 	.word	0x08000fbf
 8001240:	08001bee 	.word	0x08001bee

08001244 <_printf_common>:
 8001244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001248:	4616      	mov	r6, r2
 800124a:	4699      	mov	r9, r3
 800124c:	688a      	ldr	r2, [r1, #8]
 800124e:	690b      	ldr	r3, [r1, #16]
 8001250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001254:	4293      	cmp	r3, r2
 8001256:	bfb8      	it	lt
 8001258:	4613      	movlt	r3, r2
 800125a:	6033      	str	r3, [r6, #0]
 800125c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001260:	4607      	mov	r7, r0
 8001262:	460c      	mov	r4, r1
 8001264:	b10a      	cbz	r2, 800126a <_printf_common+0x26>
 8001266:	3301      	adds	r3, #1
 8001268:	6033      	str	r3, [r6, #0]
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	0699      	lsls	r1, r3, #26
 800126e:	bf42      	ittt	mi
 8001270:	6833      	ldrmi	r3, [r6, #0]
 8001272:	3302      	addmi	r3, #2
 8001274:	6033      	strmi	r3, [r6, #0]
 8001276:	6825      	ldr	r5, [r4, #0]
 8001278:	f015 0506 	ands.w	r5, r5, #6
 800127c:	d106      	bne.n	800128c <_printf_common+0x48>
 800127e:	f104 0a19 	add.w	sl, r4, #25
 8001282:	68e3      	ldr	r3, [r4, #12]
 8001284:	6832      	ldr	r2, [r6, #0]
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	42ab      	cmp	r3, r5
 800128a:	dc26      	bgt.n	80012da <_printf_common+0x96>
 800128c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001290:	1e13      	subs	r3, r2, #0
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	bf18      	it	ne
 8001296:	2301      	movne	r3, #1
 8001298:	0692      	lsls	r2, r2, #26
 800129a:	d42b      	bmi.n	80012f4 <_printf_common+0xb0>
 800129c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012a0:	4649      	mov	r1, r9
 80012a2:	4638      	mov	r0, r7
 80012a4:	47c0      	blx	r8
 80012a6:	3001      	adds	r0, #1
 80012a8:	d01e      	beq.n	80012e8 <_printf_common+0xa4>
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	68e5      	ldr	r5, [r4, #12]
 80012ae:	6832      	ldr	r2, [r6, #0]
 80012b0:	f003 0306 	and.w	r3, r3, #6
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	bf08      	it	eq
 80012b8:	1aad      	subeq	r5, r5, r2
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	6922      	ldr	r2, [r4, #16]
 80012be:	bf0c      	ite	eq
 80012c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012c4:	2500      	movne	r5, #0
 80012c6:	4293      	cmp	r3, r2
 80012c8:	bfc4      	itt	gt
 80012ca:	1a9b      	subgt	r3, r3, r2
 80012cc:	18ed      	addgt	r5, r5, r3
 80012ce:	2600      	movs	r6, #0
 80012d0:	341a      	adds	r4, #26
 80012d2:	42b5      	cmp	r5, r6
 80012d4:	d11a      	bne.n	800130c <_printf_common+0xc8>
 80012d6:	2000      	movs	r0, #0
 80012d8:	e008      	b.n	80012ec <_printf_common+0xa8>
 80012da:	2301      	movs	r3, #1
 80012dc:	4652      	mov	r2, sl
 80012de:	4649      	mov	r1, r9
 80012e0:	4638      	mov	r0, r7
 80012e2:	47c0      	blx	r8
 80012e4:	3001      	adds	r0, #1
 80012e6:	d103      	bne.n	80012f0 <_printf_common+0xac>
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f0:	3501      	adds	r5, #1
 80012f2:	e7c6      	b.n	8001282 <_printf_common+0x3e>
 80012f4:	18e1      	adds	r1, r4, r3
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	2030      	movs	r0, #48	; 0x30
 80012fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012fe:	4422      	add	r2, r4
 8001300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001308:	3302      	adds	r3, #2
 800130a:	e7c7      	b.n	800129c <_printf_common+0x58>
 800130c:	2301      	movs	r3, #1
 800130e:	4622      	mov	r2, r4
 8001310:	4649      	mov	r1, r9
 8001312:	4638      	mov	r0, r7
 8001314:	47c0      	blx	r8
 8001316:	3001      	adds	r0, #1
 8001318:	d0e6      	beq.n	80012e8 <_printf_common+0xa4>
 800131a:	3601      	adds	r6, #1
 800131c:	e7d9      	b.n	80012d2 <_printf_common+0x8e>
	...

08001320 <_printf_i>:
 8001320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001324:	7e0f      	ldrb	r7, [r1, #24]
 8001326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001328:	2f78      	cmp	r7, #120	; 0x78
 800132a:	4691      	mov	r9, r2
 800132c:	4680      	mov	r8, r0
 800132e:	460c      	mov	r4, r1
 8001330:	469a      	mov	sl, r3
 8001332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001336:	d807      	bhi.n	8001348 <_printf_i+0x28>
 8001338:	2f62      	cmp	r7, #98	; 0x62
 800133a:	d80a      	bhi.n	8001352 <_printf_i+0x32>
 800133c:	2f00      	cmp	r7, #0
 800133e:	f000 80d8 	beq.w	80014f2 <_printf_i+0x1d2>
 8001342:	2f58      	cmp	r7, #88	; 0x58
 8001344:	f000 80a3 	beq.w	800148e <_printf_i+0x16e>
 8001348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800134c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001350:	e03a      	b.n	80013c8 <_printf_i+0xa8>
 8001352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001356:	2b15      	cmp	r3, #21
 8001358:	d8f6      	bhi.n	8001348 <_printf_i+0x28>
 800135a:	a101      	add	r1, pc, #4	; (adr r1, 8001360 <_printf_i+0x40>)
 800135c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001360:	080013b9 	.word	0x080013b9
 8001364:	080013cd 	.word	0x080013cd
 8001368:	08001349 	.word	0x08001349
 800136c:	08001349 	.word	0x08001349
 8001370:	08001349 	.word	0x08001349
 8001374:	08001349 	.word	0x08001349
 8001378:	080013cd 	.word	0x080013cd
 800137c:	08001349 	.word	0x08001349
 8001380:	08001349 	.word	0x08001349
 8001384:	08001349 	.word	0x08001349
 8001388:	08001349 	.word	0x08001349
 800138c:	080014d9 	.word	0x080014d9
 8001390:	080013fd 	.word	0x080013fd
 8001394:	080014bb 	.word	0x080014bb
 8001398:	08001349 	.word	0x08001349
 800139c:	08001349 	.word	0x08001349
 80013a0:	080014fb 	.word	0x080014fb
 80013a4:	08001349 	.word	0x08001349
 80013a8:	080013fd 	.word	0x080013fd
 80013ac:	08001349 	.word	0x08001349
 80013b0:	08001349 	.word	0x08001349
 80013b4:	080014c3 	.word	0x080014c3
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	1d1a      	adds	r2, r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	602a      	str	r2, [r5, #0]
 80013c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0a3      	b.n	8001514 <_printf_i+0x1f4>
 80013cc:	6820      	ldr	r0, [r4, #0]
 80013ce:	6829      	ldr	r1, [r5, #0]
 80013d0:	0606      	lsls	r6, r0, #24
 80013d2:	f101 0304 	add.w	r3, r1, #4
 80013d6:	d50a      	bpl.n	80013ee <_printf_i+0xce>
 80013d8:	680e      	ldr	r6, [r1, #0]
 80013da:	602b      	str	r3, [r5, #0]
 80013dc:	2e00      	cmp	r6, #0
 80013de:	da03      	bge.n	80013e8 <_printf_i+0xc8>
 80013e0:	232d      	movs	r3, #45	; 0x2d
 80013e2:	4276      	negs	r6, r6
 80013e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013e8:	485e      	ldr	r0, [pc, #376]	; (8001564 <_printf_i+0x244>)
 80013ea:	230a      	movs	r3, #10
 80013ec:	e019      	b.n	8001422 <_printf_i+0x102>
 80013ee:	680e      	ldr	r6, [r1, #0]
 80013f0:	602b      	str	r3, [r5, #0]
 80013f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80013f6:	bf18      	it	ne
 80013f8:	b236      	sxthne	r6, r6
 80013fa:	e7ef      	b.n	80013dc <_printf_i+0xbc>
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	6820      	ldr	r0, [r4, #0]
 8001400:	1d19      	adds	r1, r3, #4
 8001402:	6029      	str	r1, [r5, #0]
 8001404:	0601      	lsls	r1, r0, #24
 8001406:	d501      	bpl.n	800140c <_printf_i+0xec>
 8001408:	681e      	ldr	r6, [r3, #0]
 800140a:	e002      	b.n	8001412 <_printf_i+0xf2>
 800140c:	0646      	lsls	r6, r0, #25
 800140e:	d5fb      	bpl.n	8001408 <_printf_i+0xe8>
 8001410:	881e      	ldrh	r6, [r3, #0]
 8001412:	4854      	ldr	r0, [pc, #336]	; (8001564 <_printf_i+0x244>)
 8001414:	2f6f      	cmp	r7, #111	; 0x6f
 8001416:	bf0c      	ite	eq
 8001418:	2308      	moveq	r3, #8
 800141a:	230a      	movne	r3, #10
 800141c:	2100      	movs	r1, #0
 800141e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001422:	6865      	ldr	r5, [r4, #4]
 8001424:	60a5      	str	r5, [r4, #8]
 8001426:	2d00      	cmp	r5, #0
 8001428:	bfa2      	ittt	ge
 800142a:	6821      	ldrge	r1, [r4, #0]
 800142c:	f021 0104 	bicge.w	r1, r1, #4
 8001430:	6021      	strge	r1, [r4, #0]
 8001432:	b90e      	cbnz	r6, 8001438 <_printf_i+0x118>
 8001434:	2d00      	cmp	r5, #0
 8001436:	d04d      	beq.n	80014d4 <_printf_i+0x1b4>
 8001438:	4615      	mov	r5, r2
 800143a:	fbb6 f1f3 	udiv	r1, r6, r3
 800143e:	fb03 6711 	mls	r7, r3, r1, r6
 8001442:	5dc7      	ldrb	r7, [r0, r7]
 8001444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001448:	4637      	mov	r7, r6
 800144a:	42bb      	cmp	r3, r7
 800144c:	460e      	mov	r6, r1
 800144e:	d9f4      	bls.n	800143a <_printf_i+0x11a>
 8001450:	2b08      	cmp	r3, #8
 8001452:	d10b      	bne.n	800146c <_printf_i+0x14c>
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	07de      	lsls	r6, r3, #31
 8001458:	d508      	bpl.n	800146c <_printf_i+0x14c>
 800145a:	6923      	ldr	r3, [r4, #16]
 800145c:	6861      	ldr	r1, [r4, #4]
 800145e:	4299      	cmp	r1, r3
 8001460:	bfde      	ittt	le
 8001462:	2330      	movle	r3, #48	; 0x30
 8001464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001468:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800146c:	1b52      	subs	r2, r2, r5
 800146e:	6122      	str	r2, [r4, #16]
 8001470:	f8cd a000 	str.w	sl, [sp]
 8001474:	464b      	mov	r3, r9
 8001476:	aa03      	add	r2, sp, #12
 8001478:	4621      	mov	r1, r4
 800147a:	4640      	mov	r0, r8
 800147c:	f7ff fee2 	bl	8001244 <_printf_common>
 8001480:	3001      	adds	r0, #1
 8001482:	d14c      	bne.n	800151e <_printf_i+0x1fe>
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001488:	b004      	add	sp, #16
 800148a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148e:	4835      	ldr	r0, [pc, #212]	; (8001564 <_printf_i+0x244>)
 8001490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001494:	6829      	ldr	r1, [r5, #0]
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	f851 6b04 	ldr.w	r6, [r1], #4
 800149c:	6029      	str	r1, [r5, #0]
 800149e:	061d      	lsls	r5, r3, #24
 80014a0:	d514      	bpl.n	80014cc <_printf_i+0x1ac>
 80014a2:	07df      	lsls	r7, r3, #31
 80014a4:	bf44      	itt	mi
 80014a6:	f043 0320 	orrmi.w	r3, r3, #32
 80014aa:	6023      	strmi	r3, [r4, #0]
 80014ac:	b91e      	cbnz	r6, 80014b6 <_printf_i+0x196>
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	f023 0320 	bic.w	r3, r3, #32
 80014b4:	6023      	str	r3, [r4, #0]
 80014b6:	2310      	movs	r3, #16
 80014b8:	e7b0      	b.n	800141c <_printf_i+0xfc>
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	2378      	movs	r3, #120	; 0x78
 80014c4:	4828      	ldr	r0, [pc, #160]	; (8001568 <_printf_i+0x248>)
 80014c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014ca:	e7e3      	b.n	8001494 <_printf_i+0x174>
 80014cc:	0659      	lsls	r1, r3, #25
 80014ce:	bf48      	it	mi
 80014d0:	b2b6      	uxthmi	r6, r6
 80014d2:	e7e6      	b.n	80014a2 <_printf_i+0x182>
 80014d4:	4615      	mov	r5, r2
 80014d6:	e7bb      	b.n	8001450 <_printf_i+0x130>
 80014d8:	682b      	ldr	r3, [r5, #0]
 80014da:	6826      	ldr	r6, [r4, #0]
 80014dc:	6961      	ldr	r1, [r4, #20]
 80014de:	1d18      	adds	r0, r3, #4
 80014e0:	6028      	str	r0, [r5, #0]
 80014e2:	0635      	lsls	r5, r6, #24
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	d501      	bpl.n	80014ec <_printf_i+0x1cc>
 80014e8:	6019      	str	r1, [r3, #0]
 80014ea:	e002      	b.n	80014f2 <_printf_i+0x1d2>
 80014ec:	0670      	lsls	r0, r6, #25
 80014ee:	d5fb      	bpl.n	80014e8 <_printf_i+0x1c8>
 80014f0:	8019      	strh	r1, [r3, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	6123      	str	r3, [r4, #16]
 80014f6:	4615      	mov	r5, r2
 80014f8:	e7ba      	b.n	8001470 <_printf_i+0x150>
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	1d1a      	adds	r2, r3, #4
 80014fe:	602a      	str	r2, [r5, #0]
 8001500:	681d      	ldr	r5, [r3, #0]
 8001502:	6862      	ldr	r2, [r4, #4]
 8001504:	2100      	movs	r1, #0
 8001506:	4628      	mov	r0, r5
 8001508:	f7fe fe82 	bl	8000210 <memchr>
 800150c:	b108      	cbz	r0, 8001512 <_printf_i+0x1f2>
 800150e:	1b40      	subs	r0, r0, r5
 8001510:	6060      	str	r0, [r4, #4]
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	6123      	str	r3, [r4, #16]
 8001516:	2300      	movs	r3, #0
 8001518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800151c:	e7a8      	b.n	8001470 <_printf_i+0x150>
 800151e:	6923      	ldr	r3, [r4, #16]
 8001520:	462a      	mov	r2, r5
 8001522:	4649      	mov	r1, r9
 8001524:	4640      	mov	r0, r8
 8001526:	47d0      	blx	sl
 8001528:	3001      	adds	r0, #1
 800152a:	d0ab      	beq.n	8001484 <_printf_i+0x164>
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	079b      	lsls	r3, r3, #30
 8001530:	d413      	bmi.n	800155a <_printf_i+0x23a>
 8001532:	68e0      	ldr	r0, [r4, #12]
 8001534:	9b03      	ldr	r3, [sp, #12]
 8001536:	4298      	cmp	r0, r3
 8001538:	bfb8      	it	lt
 800153a:	4618      	movlt	r0, r3
 800153c:	e7a4      	b.n	8001488 <_printf_i+0x168>
 800153e:	2301      	movs	r3, #1
 8001540:	4632      	mov	r2, r6
 8001542:	4649      	mov	r1, r9
 8001544:	4640      	mov	r0, r8
 8001546:	47d0      	blx	sl
 8001548:	3001      	adds	r0, #1
 800154a:	d09b      	beq.n	8001484 <_printf_i+0x164>
 800154c:	3501      	adds	r5, #1
 800154e:	68e3      	ldr	r3, [r4, #12]
 8001550:	9903      	ldr	r1, [sp, #12]
 8001552:	1a5b      	subs	r3, r3, r1
 8001554:	42ab      	cmp	r3, r5
 8001556:	dcf2      	bgt.n	800153e <_printf_i+0x21e>
 8001558:	e7eb      	b.n	8001532 <_printf_i+0x212>
 800155a:	2500      	movs	r5, #0
 800155c:	f104 0619 	add.w	r6, r4, #25
 8001560:	e7f5      	b.n	800154e <_printf_i+0x22e>
 8001562:	bf00      	nop
 8001564:	08001bf9 	.word	0x08001bf9
 8001568:	08001c0a 	.word	0x08001c0a

0800156c <_sbrk_r>:
 800156c:	b538      	push	{r3, r4, r5, lr}
 800156e:	4d06      	ldr	r5, [pc, #24]	; (8001588 <_sbrk_r+0x1c>)
 8001570:	2300      	movs	r3, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	602b      	str	r3, [r5, #0]
 8001578:	f7ff fad4 	bl	8000b24 <_sbrk>
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	d102      	bne.n	8001586 <_sbrk_r+0x1a>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	b103      	cbz	r3, 8001586 <_sbrk_r+0x1a>
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	200000e8 	.word	0x200000e8

0800158c <__sread>:
 800158c:	b510      	push	{r4, lr}
 800158e:	460c      	mov	r4, r1
 8001590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001594:	f000 fab2 	bl	8001afc <_read_r>
 8001598:	2800      	cmp	r0, #0
 800159a:	bfab      	itete	ge
 800159c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800159e:	89a3      	ldrhlt	r3, [r4, #12]
 80015a0:	181b      	addge	r3, r3, r0
 80015a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80015a6:	bfac      	ite	ge
 80015a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80015aa:	81a3      	strhlt	r3, [r4, #12]
 80015ac:	bd10      	pop	{r4, pc}

080015ae <__swrite>:
 80015ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b2:	461f      	mov	r7, r3
 80015b4:	898b      	ldrh	r3, [r1, #12]
 80015b6:	05db      	lsls	r3, r3, #23
 80015b8:	4605      	mov	r5, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4616      	mov	r6, r2
 80015be:	d505      	bpl.n	80015cc <__swrite+0x1e>
 80015c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015c4:	2302      	movs	r3, #2
 80015c6:	2200      	movs	r2, #0
 80015c8:	f000 f9c8 	bl	800195c <_lseek_r>
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015d6:	81a3      	strh	r3, [r4, #12]
 80015d8:	4632      	mov	r2, r6
 80015da:	463b      	mov	r3, r7
 80015dc:	4628      	mov	r0, r5
 80015de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015e2:	f000 b869 	b.w	80016b8 <_write_r>

080015e6 <__sseek>:
 80015e6:	b510      	push	{r4, lr}
 80015e8:	460c      	mov	r4, r1
 80015ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015ee:	f000 f9b5 	bl	800195c <_lseek_r>
 80015f2:	1c43      	adds	r3, r0, #1
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	bf15      	itete	ne
 80015f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80015fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001602:	81a3      	strheq	r3, [r4, #12]
 8001604:	bf18      	it	ne
 8001606:	81a3      	strhne	r3, [r4, #12]
 8001608:	bd10      	pop	{r4, pc}

0800160a <__sclose>:
 800160a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800160e:	f000 b8d3 	b.w	80017b8 <_close_r>
	...

08001614 <__swbuf_r>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	460e      	mov	r6, r1
 8001618:	4614      	mov	r4, r2
 800161a:	4605      	mov	r5, r0
 800161c:	b118      	cbz	r0, 8001626 <__swbuf_r+0x12>
 800161e:	6983      	ldr	r3, [r0, #24]
 8001620:	b90b      	cbnz	r3, 8001626 <__swbuf_r+0x12>
 8001622:	f7ff fb81 	bl	8000d28 <__sinit>
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <__swbuf_r+0x98>)
 8001628:	429c      	cmp	r4, r3
 800162a:	d12b      	bne.n	8001684 <__swbuf_r+0x70>
 800162c:	686c      	ldr	r4, [r5, #4]
 800162e:	69a3      	ldr	r3, [r4, #24]
 8001630:	60a3      	str	r3, [r4, #8]
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	071a      	lsls	r2, r3, #28
 8001636:	d52f      	bpl.n	8001698 <__swbuf_r+0x84>
 8001638:	6923      	ldr	r3, [r4, #16]
 800163a:	b36b      	cbz	r3, 8001698 <__swbuf_r+0x84>
 800163c:	6923      	ldr	r3, [r4, #16]
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	1ac0      	subs	r0, r0, r3
 8001642:	6963      	ldr	r3, [r4, #20]
 8001644:	b2f6      	uxtb	r6, r6
 8001646:	4283      	cmp	r3, r0
 8001648:	4637      	mov	r7, r6
 800164a:	dc04      	bgt.n	8001656 <__swbuf_r+0x42>
 800164c:	4621      	mov	r1, r4
 800164e:	4628      	mov	r0, r5
 8001650:	f000 f948 	bl	80018e4 <_fflush_r>
 8001654:	bb30      	cbnz	r0, 80016a4 <__swbuf_r+0x90>
 8001656:	68a3      	ldr	r3, [r4, #8]
 8001658:	3b01      	subs	r3, #1
 800165a:	60a3      	str	r3, [r4, #8]
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	6022      	str	r2, [r4, #0]
 8001662:	701e      	strb	r6, [r3, #0]
 8001664:	6963      	ldr	r3, [r4, #20]
 8001666:	3001      	adds	r0, #1
 8001668:	4283      	cmp	r3, r0
 800166a:	d004      	beq.n	8001676 <__swbuf_r+0x62>
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	07db      	lsls	r3, r3, #31
 8001670:	d506      	bpl.n	8001680 <__swbuf_r+0x6c>
 8001672:	2e0a      	cmp	r6, #10
 8001674:	d104      	bne.n	8001680 <__swbuf_r+0x6c>
 8001676:	4621      	mov	r1, r4
 8001678:	4628      	mov	r0, r5
 800167a:	f000 f933 	bl	80018e4 <_fflush_r>
 800167e:	b988      	cbnz	r0, 80016a4 <__swbuf_r+0x90>
 8001680:	4638      	mov	r0, r7
 8001682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <__swbuf_r+0x9c>)
 8001686:	429c      	cmp	r4, r3
 8001688:	d101      	bne.n	800168e <__swbuf_r+0x7a>
 800168a:	68ac      	ldr	r4, [r5, #8]
 800168c:	e7cf      	b.n	800162e <__swbuf_r+0x1a>
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <__swbuf_r+0xa0>)
 8001690:	429c      	cmp	r4, r3
 8001692:	bf08      	it	eq
 8001694:	68ec      	ldreq	r4, [r5, #12]
 8001696:	e7ca      	b.n	800162e <__swbuf_r+0x1a>
 8001698:	4621      	mov	r1, r4
 800169a:	4628      	mov	r0, r5
 800169c:	f000 f81e 	bl	80016dc <__swsetup_r>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d0cb      	beq.n	800163c <__swbuf_r+0x28>
 80016a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80016a8:	e7ea      	b.n	8001680 <__swbuf_r+0x6c>
 80016aa:	bf00      	nop
 80016ac:	08001ba8 	.word	0x08001ba8
 80016b0:	08001bc8 	.word	0x08001bc8
 80016b4:	08001b88 	.word	0x08001b88

080016b8 <_write_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d07      	ldr	r5, [pc, #28]	; (80016d8 <_write_r+0x20>)
 80016bc:	4604      	mov	r4, r0
 80016be:	4608      	mov	r0, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	602a      	str	r2, [r5, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f7ff f9db 	bl	8000a82 <_write>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_write_r+0x1e>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_write_r+0x1e>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	200000e8 	.word	0x200000e8

080016dc <__swsetup_r>:
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <__swsetup_r+0xcc>)
 80016de:	b570      	push	{r4, r5, r6, lr}
 80016e0:	681d      	ldr	r5, [r3, #0]
 80016e2:	4606      	mov	r6, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	b125      	cbz	r5, 80016f2 <__swsetup_r+0x16>
 80016e8:	69ab      	ldr	r3, [r5, #24]
 80016ea:	b913      	cbnz	r3, 80016f2 <__swsetup_r+0x16>
 80016ec:	4628      	mov	r0, r5
 80016ee:	f7ff fb1b 	bl	8000d28 <__sinit>
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <__swsetup_r+0xd0>)
 80016f4:	429c      	cmp	r4, r3
 80016f6:	d10f      	bne.n	8001718 <__swsetup_r+0x3c>
 80016f8:	686c      	ldr	r4, [r5, #4]
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001700:	0719      	lsls	r1, r3, #28
 8001702:	d42c      	bmi.n	800175e <__swsetup_r+0x82>
 8001704:	06dd      	lsls	r5, r3, #27
 8001706:	d411      	bmi.n	800172c <__swsetup_r+0x50>
 8001708:	2309      	movs	r3, #9
 800170a:	6033      	str	r3, [r6, #0]
 800170c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001710:	81a3      	strh	r3, [r4, #12]
 8001712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001716:	e03e      	b.n	8001796 <__swsetup_r+0xba>
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <__swsetup_r+0xd4>)
 800171a:	429c      	cmp	r4, r3
 800171c:	d101      	bne.n	8001722 <__swsetup_r+0x46>
 800171e:	68ac      	ldr	r4, [r5, #8]
 8001720:	e7eb      	b.n	80016fa <__swsetup_r+0x1e>
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <__swsetup_r+0xd8>)
 8001724:	429c      	cmp	r4, r3
 8001726:	bf08      	it	eq
 8001728:	68ec      	ldreq	r4, [r5, #12]
 800172a:	e7e6      	b.n	80016fa <__swsetup_r+0x1e>
 800172c:	0758      	lsls	r0, r3, #29
 800172e:	d512      	bpl.n	8001756 <__swsetup_r+0x7a>
 8001730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001732:	b141      	cbz	r1, 8001746 <__swsetup_r+0x6a>
 8001734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001738:	4299      	cmp	r1, r3
 800173a:	d002      	beq.n	8001742 <__swsetup_r+0x66>
 800173c:	4630      	mov	r0, r6
 800173e:	f000 f991 	bl	8001a64 <_free_r>
 8001742:	2300      	movs	r3, #0
 8001744:	6363      	str	r3, [r4, #52]	; 0x34
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800174c:	81a3      	strh	r3, [r4, #12]
 800174e:	2300      	movs	r3, #0
 8001750:	6063      	str	r3, [r4, #4]
 8001752:	6923      	ldr	r3, [r4, #16]
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	81a3      	strh	r3, [r4, #12]
 800175e:	6923      	ldr	r3, [r4, #16]
 8001760:	b94b      	cbnz	r3, 8001776 <__swsetup_r+0x9a>
 8001762:	89a3      	ldrh	r3, [r4, #12]
 8001764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	d003      	beq.n	8001776 <__swsetup_r+0x9a>
 800176e:	4621      	mov	r1, r4
 8001770:	4630      	mov	r0, r6
 8001772:	f000 f92b 	bl	80019cc <__smakebuf_r>
 8001776:	89a0      	ldrh	r0, [r4, #12]
 8001778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800177c:	f010 0301 	ands.w	r3, r0, #1
 8001780:	d00a      	beq.n	8001798 <__swsetup_r+0xbc>
 8001782:	2300      	movs	r3, #0
 8001784:	60a3      	str	r3, [r4, #8]
 8001786:	6963      	ldr	r3, [r4, #20]
 8001788:	425b      	negs	r3, r3
 800178a:	61a3      	str	r3, [r4, #24]
 800178c:	6923      	ldr	r3, [r4, #16]
 800178e:	b943      	cbnz	r3, 80017a2 <__swsetup_r+0xc6>
 8001790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001794:	d1ba      	bne.n	800170c <__swsetup_r+0x30>
 8001796:	bd70      	pop	{r4, r5, r6, pc}
 8001798:	0781      	lsls	r1, r0, #30
 800179a:	bf58      	it	pl
 800179c:	6963      	ldrpl	r3, [r4, #20]
 800179e:	60a3      	str	r3, [r4, #8]
 80017a0:	e7f4      	b.n	800178c <__swsetup_r+0xb0>
 80017a2:	2000      	movs	r0, #0
 80017a4:	e7f7      	b.n	8001796 <__swsetup_r+0xba>
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000
 80017ac:	08001ba8 	.word	0x08001ba8
 80017b0:	08001bc8 	.word	0x08001bc8
 80017b4:	08001b88 	.word	0x08001b88

080017b8 <_close_r>:
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4d06      	ldr	r5, [pc, #24]	; (80017d4 <_close_r+0x1c>)
 80017bc:	2300      	movs	r3, #0
 80017be:	4604      	mov	r4, r0
 80017c0:	4608      	mov	r0, r1
 80017c2:	602b      	str	r3, [r5, #0]
 80017c4:	f7ff f979 	bl	8000aba <_close>
 80017c8:	1c43      	adds	r3, r0, #1
 80017ca:	d102      	bne.n	80017d2 <_close_r+0x1a>
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	b103      	cbz	r3, 80017d2 <_close_r+0x1a>
 80017d0:	6023      	str	r3, [r4, #0]
 80017d2:	bd38      	pop	{r3, r4, r5, pc}
 80017d4:	200000e8 	.word	0x200000e8

080017d8 <__sflush_r>:
 80017d8:	898a      	ldrh	r2, [r1, #12]
 80017da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017de:	4605      	mov	r5, r0
 80017e0:	0710      	lsls	r0, r2, #28
 80017e2:	460c      	mov	r4, r1
 80017e4:	d458      	bmi.n	8001898 <__sflush_r+0xc0>
 80017e6:	684b      	ldr	r3, [r1, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dc05      	bgt.n	80017f8 <__sflush_r+0x20>
 80017ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dc02      	bgt.n	80017f8 <__sflush_r+0x20>
 80017f2:	2000      	movs	r0, #0
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017fa:	2e00      	cmp	r6, #0
 80017fc:	d0f9      	beq.n	80017f2 <__sflush_r+0x1a>
 80017fe:	2300      	movs	r3, #0
 8001800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001804:	682f      	ldr	r7, [r5, #0]
 8001806:	602b      	str	r3, [r5, #0]
 8001808:	d032      	beq.n	8001870 <__sflush_r+0x98>
 800180a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800180c:	89a3      	ldrh	r3, [r4, #12]
 800180e:	075a      	lsls	r2, r3, #29
 8001810:	d505      	bpl.n	800181e <__sflush_r+0x46>
 8001812:	6863      	ldr	r3, [r4, #4]
 8001814:	1ac0      	subs	r0, r0, r3
 8001816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001818:	b10b      	cbz	r3, 800181e <__sflush_r+0x46>
 800181a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181c:	1ac0      	subs	r0, r0, r3
 800181e:	2300      	movs	r3, #0
 8001820:	4602      	mov	r2, r0
 8001822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001824:	6a21      	ldr	r1, [r4, #32]
 8001826:	4628      	mov	r0, r5
 8001828:	47b0      	blx	r6
 800182a:	1c43      	adds	r3, r0, #1
 800182c:	89a3      	ldrh	r3, [r4, #12]
 800182e:	d106      	bne.n	800183e <__sflush_r+0x66>
 8001830:	6829      	ldr	r1, [r5, #0]
 8001832:	291d      	cmp	r1, #29
 8001834:	d82c      	bhi.n	8001890 <__sflush_r+0xb8>
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <__sflush_r+0x108>)
 8001838:	40ca      	lsrs	r2, r1
 800183a:	07d6      	lsls	r6, r2, #31
 800183c:	d528      	bpl.n	8001890 <__sflush_r+0xb8>
 800183e:	2200      	movs	r2, #0
 8001840:	6062      	str	r2, [r4, #4]
 8001842:	04d9      	lsls	r1, r3, #19
 8001844:	6922      	ldr	r2, [r4, #16]
 8001846:	6022      	str	r2, [r4, #0]
 8001848:	d504      	bpl.n	8001854 <__sflush_r+0x7c>
 800184a:	1c42      	adds	r2, r0, #1
 800184c:	d101      	bne.n	8001852 <__sflush_r+0x7a>
 800184e:	682b      	ldr	r3, [r5, #0]
 8001850:	b903      	cbnz	r3, 8001854 <__sflush_r+0x7c>
 8001852:	6560      	str	r0, [r4, #84]	; 0x54
 8001854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001856:	602f      	str	r7, [r5, #0]
 8001858:	2900      	cmp	r1, #0
 800185a:	d0ca      	beq.n	80017f2 <__sflush_r+0x1a>
 800185c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001860:	4299      	cmp	r1, r3
 8001862:	d002      	beq.n	800186a <__sflush_r+0x92>
 8001864:	4628      	mov	r0, r5
 8001866:	f000 f8fd 	bl	8001a64 <_free_r>
 800186a:	2000      	movs	r0, #0
 800186c:	6360      	str	r0, [r4, #52]	; 0x34
 800186e:	e7c1      	b.n	80017f4 <__sflush_r+0x1c>
 8001870:	6a21      	ldr	r1, [r4, #32]
 8001872:	2301      	movs	r3, #1
 8001874:	4628      	mov	r0, r5
 8001876:	47b0      	blx	r6
 8001878:	1c41      	adds	r1, r0, #1
 800187a:	d1c7      	bne.n	800180c <__sflush_r+0x34>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0c4      	beq.n	800180c <__sflush_r+0x34>
 8001882:	2b1d      	cmp	r3, #29
 8001884:	d001      	beq.n	800188a <__sflush_r+0xb2>
 8001886:	2b16      	cmp	r3, #22
 8001888:	d101      	bne.n	800188e <__sflush_r+0xb6>
 800188a:	602f      	str	r7, [r5, #0]
 800188c:	e7b1      	b.n	80017f2 <__sflush_r+0x1a>
 800188e:	89a3      	ldrh	r3, [r4, #12]
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	81a3      	strh	r3, [r4, #12]
 8001896:	e7ad      	b.n	80017f4 <__sflush_r+0x1c>
 8001898:	690f      	ldr	r7, [r1, #16]
 800189a:	2f00      	cmp	r7, #0
 800189c:	d0a9      	beq.n	80017f2 <__sflush_r+0x1a>
 800189e:	0793      	lsls	r3, r2, #30
 80018a0:	680e      	ldr	r6, [r1, #0]
 80018a2:	bf08      	it	eq
 80018a4:	694b      	ldreq	r3, [r1, #20]
 80018a6:	600f      	str	r7, [r1, #0]
 80018a8:	bf18      	it	ne
 80018aa:	2300      	movne	r3, #0
 80018ac:	eba6 0807 	sub.w	r8, r6, r7
 80018b0:	608b      	str	r3, [r1, #8]
 80018b2:	f1b8 0f00 	cmp.w	r8, #0
 80018b6:	dd9c      	ble.n	80017f2 <__sflush_r+0x1a>
 80018b8:	6a21      	ldr	r1, [r4, #32]
 80018ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018bc:	4643      	mov	r3, r8
 80018be:	463a      	mov	r2, r7
 80018c0:	4628      	mov	r0, r5
 80018c2:	47b0      	blx	r6
 80018c4:	2800      	cmp	r0, #0
 80018c6:	dc06      	bgt.n	80018d6 <__sflush_r+0xfe>
 80018c8:	89a3      	ldrh	r3, [r4, #12]
 80018ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ce:	81a3      	strh	r3, [r4, #12]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018d4:	e78e      	b.n	80017f4 <__sflush_r+0x1c>
 80018d6:	4407      	add	r7, r0
 80018d8:	eba8 0800 	sub.w	r8, r8, r0
 80018dc:	e7e9      	b.n	80018b2 <__sflush_r+0xda>
 80018de:	bf00      	nop
 80018e0:	20400001 	.word	0x20400001

080018e4 <_fflush_r>:
 80018e4:	b538      	push	{r3, r4, r5, lr}
 80018e6:	690b      	ldr	r3, [r1, #16]
 80018e8:	4605      	mov	r5, r0
 80018ea:	460c      	mov	r4, r1
 80018ec:	b913      	cbnz	r3, 80018f4 <_fflush_r+0x10>
 80018ee:	2500      	movs	r5, #0
 80018f0:	4628      	mov	r0, r5
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
 80018f4:	b118      	cbz	r0, 80018fe <_fflush_r+0x1a>
 80018f6:	6983      	ldr	r3, [r0, #24]
 80018f8:	b90b      	cbnz	r3, 80018fe <_fflush_r+0x1a>
 80018fa:	f7ff fa15 	bl	8000d28 <__sinit>
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <_fflush_r+0x6c>)
 8001900:	429c      	cmp	r4, r3
 8001902:	d11b      	bne.n	800193c <_fflush_r+0x58>
 8001904:	686c      	ldr	r4, [r5, #4]
 8001906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ef      	beq.n	80018ee <_fflush_r+0xa>
 800190e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001910:	07d0      	lsls	r0, r2, #31
 8001912:	d404      	bmi.n	800191e <_fflush_r+0x3a>
 8001914:	0599      	lsls	r1, r3, #22
 8001916:	d402      	bmi.n	800191e <_fflush_r+0x3a>
 8001918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800191a:	f7ff faa3 	bl	8000e64 <__retarget_lock_acquire_recursive>
 800191e:	4628      	mov	r0, r5
 8001920:	4621      	mov	r1, r4
 8001922:	f7ff ff59 	bl	80017d8 <__sflush_r>
 8001926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001928:	07da      	lsls	r2, r3, #31
 800192a:	4605      	mov	r5, r0
 800192c:	d4e0      	bmi.n	80018f0 <_fflush_r+0xc>
 800192e:	89a3      	ldrh	r3, [r4, #12]
 8001930:	059b      	lsls	r3, r3, #22
 8001932:	d4dd      	bmi.n	80018f0 <_fflush_r+0xc>
 8001934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001936:	f7ff fa96 	bl	8000e66 <__retarget_lock_release_recursive>
 800193a:	e7d9      	b.n	80018f0 <_fflush_r+0xc>
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <_fflush_r+0x70>)
 800193e:	429c      	cmp	r4, r3
 8001940:	d101      	bne.n	8001946 <_fflush_r+0x62>
 8001942:	68ac      	ldr	r4, [r5, #8]
 8001944:	e7df      	b.n	8001906 <_fflush_r+0x22>
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <_fflush_r+0x74>)
 8001948:	429c      	cmp	r4, r3
 800194a:	bf08      	it	eq
 800194c:	68ec      	ldreq	r4, [r5, #12]
 800194e:	e7da      	b.n	8001906 <_fflush_r+0x22>
 8001950:	08001ba8 	.word	0x08001ba8
 8001954:	08001bc8 	.word	0x08001bc8
 8001958:	08001b88 	.word	0x08001b88

0800195c <_lseek_r>:
 800195c:	b538      	push	{r3, r4, r5, lr}
 800195e:	4d07      	ldr	r5, [pc, #28]	; (800197c <_lseek_r+0x20>)
 8001960:	4604      	mov	r4, r0
 8001962:	4608      	mov	r0, r1
 8001964:	4611      	mov	r1, r2
 8001966:	2200      	movs	r2, #0
 8001968:	602a      	str	r2, [r5, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	f7ff f8cc 	bl	8000b08 <_lseek>
 8001970:	1c43      	adds	r3, r0, #1
 8001972:	d102      	bne.n	800197a <_lseek_r+0x1e>
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	b103      	cbz	r3, 800197a <_lseek_r+0x1e>
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	200000e8 	.word	0x200000e8

08001980 <__swhatbuf_r>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	460e      	mov	r6, r1
 8001984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001988:	2900      	cmp	r1, #0
 800198a:	b096      	sub	sp, #88	; 0x58
 800198c:	4614      	mov	r4, r2
 800198e:	461d      	mov	r5, r3
 8001990:	da08      	bge.n	80019a4 <__swhatbuf_r+0x24>
 8001992:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	602a      	str	r2, [r5, #0]
 800199a:	061a      	lsls	r2, r3, #24
 800199c:	d410      	bmi.n	80019c0 <__swhatbuf_r+0x40>
 800199e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a2:	e00e      	b.n	80019c2 <__swhatbuf_r+0x42>
 80019a4:	466a      	mov	r2, sp
 80019a6:	f000 f8bb 	bl	8001b20 <_fstat_r>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	dbf1      	blt.n	8001992 <__swhatbuf_r+0x12>
 80019ae:	9a01      	ldr	r2, [sp, #4]
 80019b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019b8:	425a      	negs	r2, r3
 80019ba:	415a      	adcs	r2, r3
 80019bc:	602a      	str	r2, [r5, #0]
 80019be:	e7ee      	b.n	800199e <__swhatbuf_r+0x1e>
 80019c0:	2340      	movs	r3, #64	; 0x40
 80019c2:	2000      	movs	r0, #0
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	b016      	add	sp, #88	; 0x58
 80019c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080019cc <__smakebuf_r>:
 80019cc:	898b      	ldrh	r3, [r1, #12]
 80019ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019d0:	079d      	lsls	r5, r3, #30
 80019d2:	4606      	mov	r6, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	d507      	bpl.n	80019e8 <__smakebuf_r+0x1c>
 80019d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	6123      	str	r3, [r4, #16]
 80019e0:	2301      	movs	r3, #1
 80019e2:	6163      	str	r3, [r4, #20]
 80019e4:	b002      	add	sp, #8
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	ab01      	add	r3, sp, #4
 80019ea:	466a      	mov	r2, sp
 80019ec:	f7ff ffc8 	bl	8001980 <__swhatbuf_r>
 80019f0:	9900      	ldr	r1, [sp, #0]
 80019f2:	4605      	mov	r5, r0
 80019f4:	4630      	mov	r0, r6
 80019f6:	f7ff fa57 	bl	8000ea8 <_malloc_r>
 80019fa:	b948      	cbnz	r0, 8001a10 <__smakebuf_r+0x44>
 80019fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a00:	059a      	lsls	r2, r3, #22
 8001a02:	d4ef      	bmi.n	80019e4 <__smakebuf_r+0x18>
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	e7e3      	b.n	80019d8 <__smakebuf_r+0xc>
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <__smakebuf_r+0x7c>)
 8001a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a14:	89a3      	ldrh	r3, [r4, #12]
 8001a16:	6020      	str	r0, [r4, #0]
 8001a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1c:	81a3      	strh	r3, [r4, #12]
 8001a1e:	9b00      	ldr	r3, [sp, #0]
 8001a20:	6163      	str	r3, [r4, #20]
 8001a22:	9b01      	ldr	r3, [sp, #4]
 8001a24:	6120      	str	r0, [r4, #16]
 8001a26:	b15b      	cbz	r3, 8001a40 <__smakebuf_r+0x74>
 8001a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a2c:	4630      	mov	r0, r6
 8001a2e:	f000 f889 	bl	8001b44 <_isatty_r>
 8001a32:	b128      	cbz	r0, 8001a40 <__smakebuf_r+0x74>
 8001a34:	89a3      	ldrh	r3, [r4, #12]
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	89a0      	ldrh	r0, [r4, #12]
 8001a42:	4305      	orrs	r5, r0
 8001a44:	81a5      	strh	r5, [r4, #12]
 8001a46:	e7cd      	b.n	80019e4 <__smakebuf_r+0x18>
 8001a48:	08000cc1 	.word	0x08000cc1

08001a4c <__malloc_lock>:
 8001a4c:	4801      	ldr	r0, [pc, #4]	; (8001a54 <__malloc_lock+0x8>)
 8001a4e:	f7ff ba09 	b.w	8000e64 <__retarget_lock_acquire_recursive>
 8001a52:	bf00      	nop
 8001a54:	200000dc 	.word	0x200000dc

08001a58 <__malloc_unlock>:
 8001a58:	4801      	ldr	r0, [pc, #4]	; (8001a60 <__malloc_unlock+0x8>)
 8001a5a:	f7ff ba04 	b.w	8000e66 <__retarget_lock_release_recursive>
 8001a5e:	bf00      	nop
 8001a60:	200000dc 	.word	0x200000dc

08001a64 <_free_r>:
 8001a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a66:	2900      	cmp	r1, #0
 8001a68:	d044      	beq.n	8001af4 <_free_r+0x90>
 8001a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a6e:	9001      	str	r0, [sp, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f1a1 0404 	sub.w	r4, r1, #4
 8001a76:	bfb8      	it	lt
 8001a78:	18e4      	addlt	r4, r4, r3
 8001a7a:	f7ff ffe7 	bl	8001a4c <__malloc_lock>
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	; (8001af8 <_free_r+0x94>)
 8001a80:	9801      	ldr	r0, [sp, #4]
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	b933      	cbnz	r3, 8001a94 <_free_r+0x30>
 8001a86:	6063      	str	r3, [r4, #4]
 8001a88:	6014      	str	r4, [r2, #0]
 8001a8a:	b003      	add	sp, #12
 8001a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a90:	f7ff bfe2 	b.w	8001a58 <__malloc_unlock>
 8001a94:	42a3      	cmp	r3, r4
 8001a96:	d908      	bls.n	8001aaa <_free_r+0x46>
 8001a98:	6825      	ldr	r5, [r4, #0]
 8001a9a:	1961      	adds	r1, r4, r5
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	bf01      	itttt	eq
 8001aa0:	6819      	ldreq	r1, [r3, #0]
 8001aa2:	685b      	ldreq	r3, [r3, #4]
 8001aa4:	1949      	addeq	r1, r1, r5
 8001aa6:	6021      	streq	r1, [r4, #0]
 8001aa8:	e7ed      	b.n	8001a86 <_free_r+0x22>
 8001aaa:	461a      	mov	r2, r3
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	b10b      	cbz	r3, 8001ab4 <_free_r+0x50>
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	d9fa      	bls.n	8001aaa <_free_r+0x46>
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	1855      	adds	r5, r2, r1
 8001ab8:	42a5      	cmp	r5, r4
 8001aba:	d10b      	bne.n	8001ad4 <_free_r+0x70>
 8001abc:	6824      	ldr	r4, [r4, #0]
 8001abe:	4421      	add	r1, r4
 8001ac0:	1854      	adds	r4, r2, r1
 8001ac2:	42a3      	cmp	r3, r4
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	d1e0      	bne.n	8001a8a <_free_r+0x26>
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	4421      	add	r1, r4
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	e7da      	b.n	8001a8a <_free_r+0x26>
 8001ad4:	d902      	bls.n	8001adc <_free_r+0x78>
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	6003      	str	r3, [r0, #0]
 8001ada:	e7d6      	b.n	8001a8a <_free_r+0x26>
 8001adc:	6825      	ldr	r5, [r4, #0]
 8001ade:	1961      	adds	r1, r4, r5
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	bf04      	itt	eq
 8001ae4:	6819      	ldreq	r1, [r3, #0]
 8001ae6:	685b      	ldreq	r3, [r3, #4]
 8001ae8:	6063      	str	r3, [r4, #4]
 8001aea:	bf04      	itt	eq
 8001aec:	1949      	addeq	r1, r1, r5
 8001aee:	6021      	streq	r1, [r4, #0]
 8001af0:	6054      	str	r4, [r2, #4]
 8001af2:	e7ca      	b.n	8001a8a <_free_r+0x26>
 8001af4:	b003      	add	sp, #12
 8001af6:	bd30      	pop	{r4, r5, pc}
 8001af8:	200000e0 	.word	0x200000e0

08001afc <_read_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4d07      	ldr	r5, [pc, #28]	; (8001b1c <_read_r+0x20>)
 8001b00:	4604      	mov	r4, r0
 8001b02:	4608      	mov	r0, r1
 8001b04:	4611      	mov	r1, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	602a      	str	r2, [r5, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f7fe ff9c 	bl	8000a48 <_read>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d102      	bne.n	8001b1a <_read_r+0x1e>
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	b103      	cbz	r3, 8001b1a <_read_r+0x1e>
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
 8001b1c:	200000e8 	.word	0x200000e8

08001b20 <_fstat_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4d07      	ldr	r5, [pc, #28]	; (8001b40 <_fstat_r+0x20>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	602b      	str	r3, [r5, #0]
 8001b2e:	f7fe ffd0 	bl	8000ad2 <_fstat>
 8001b32:	1c43      	adds	r3, r0, #1
 8001b34:	d102      	bne.n	8001b3c <_fstat_r+0x1c>
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	b103      	cbz	r3, 8001b3c <_fstat_r+0x1c>
 8001b3a:	6023      	str	r3, [r4, #0]
 8001b3c:	bd38      	pop	{r3, r4, r5, pc}
 8001b3e:	bf00      	nop
 8001b40:	200000e8 	.word	0x200000e8

08001b44 <_isatty_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4d06      	ldr	r5, [pc, #24]	; (8001b60 <_isatty_r+0x1c>)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	602b      	str	r3, [r5, #0]
 8001b50:	f7fe ffcf 	bl	8000af2 <_isatty>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d102      	bne.n	8001b5e <_isatty_r+0x1a>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	b103      	cbz	r3, 8001b5e <_isatty_r+0x1a>
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
 8001b60:	200000e8 	.word	0x200000e8

08001b64 <_init>:
 8001b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b66:	bf00      	nop
 8001b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b6a:	bc08      	pop	{r3}
 8001b6c:	469e      	mov	lr, r3
 8001b6e:	4770      	bx	lr

08001b70 <_fini>:
 8001b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b72:	bf00      	nop
 8001b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b76:	bc08      	pop	{r3}
 8001b78:	469e      	mov	lr, r3
 8001b7a:	4770      	bx	lr
